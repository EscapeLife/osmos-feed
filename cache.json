{
  "sources": [
    {
      "title": "Escape",
      "feedUrl": "https://www.escapelife.site/atom.xml",
      "siteUrl": "https://www.escapelife.site/atom.xml",
      "articles": [
        {
          "id": "https://www.escapelife.site/posts/e3113340.html",
          "author": null,
          "description": "<h1 id=\"2022-年第四季度总结\"><a href=\"#2022-年第四季度总结\" class=\"headerlink\" title=\"2022 年第四季度总结\"></a>2022",
          "link": "https://www.escapelife.site/posts/e3113340.html",
          "publishedOn": "2022-12-31T15:59:59.000Z",
          "wordCount": 1563,
          "title": "2022年第四季度总结",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "酷 壳 – CoolShell",
      "feedUrl": "https://coolshell.cn/feed",
      "siteUrl": "https://coolshell.cn",
      "articles": []
    },
    {
      "title": "阮一峰的网络日志",
      "feedUrl": "https://www.ruanyifeng.com/blog/atom.xml",
      "siteUrl": "http://www.ruanyifeng.com/blog/",
      "articles": [
        {
          "id": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html",
          "author": null,
          "description": "这里记录每周值得分享的科技内容，周五发布。（[通知] 下周欢度春节，周刊暂停，2月11日恢复。）...",
          "link": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html",
          "publishedOn": "2022-01-21T00:48:38.000Z",
          "wordCount": 320,
          "title": "科技爱好者周刊（第 193 期）：前端与后端，谁更难？"
        },
        {
          "id": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html",
          "author": null,
          "description": "这里记录每周值得分享的科技内容，周五发布。...",
          "link": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html",
          "publishedOn": "2022-01-14T00:39:50.000Z",
          "wordCount": 407,
          "title": "科技爱好者周刊（第 192 期）：最大的机会来自新技术"
        }
      ]
    },
    {
      "title": "MacTalk-池建强的随想录",
      "feedUrl": "https://macshuo.com/?feed=rss2",
      "siteUrl": "https://macshuo.com",
      "articles": []
    },
    {
      "title": "Tinyfool的个人网站",
      "feedUrl": "http://feeds.feedburner.com/Tinyfoolblog",
      "siteUrl": "https://codechina.org/",
      "articles": [
        {
          "id": "https://codechina.org/?p=27056",
          "author": "tinyfool",
          "description": "我小时候爱看的书除了武侠小说，就是各类富翁的造富神话，比如陶朱公、邓通、石崇、沈万三、胡雪岩等等。他们的造富神 […]\n中国历史上的首富邓通、石崇、沈万三、胡雪岩为什么下场都不好？最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2023/01/shoufu/",
          "publishedOn": "2023-01-10T06:56:46.000Z",
          "wordCount": 1207,
          "title": "中国历史上的首富邓通、石崇、沈万三、胡雪岩为什么下场都不好？",
          "imageUrl": "https://codechina.org/wp-content/uploads/2023/01/ab2a4adc6b8e4074b743b1a73ceabcb3.jpeg"
        },
        {
          "id": "https://codechina.org/?p=27016",
          "author": "tinyfool",
          "description": "这个域名codechina.org我买的时候，其实是想做个代码搜索服务之类的，那时候，我刚刚做的搜索公司创业失 […]\nBlog CodeChina的2022年年度总结最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2023/01/2022-blog/",
          "publishedOn": "2023-01-09T04:48:53.000Z",
          "wordCount": 1360,
          "title": "Blog CodeChina的2022年年度总结",
          "imageUrl": "https://codechina.org/wp-content/uploads/2023/01/截屏2023-01-09-12.43.05.png"
        },
        {
          "id": "https://codechina.org/?p=26980",
          "author": "tinyfool",
          "description": "特斯拉又又又……又降价了！你猜我怎么知道的？没有垃圾邮件，没有看到广告，没有朋友告知。 因为听说又有特斯拉车主 […]\n特斯拉降价，车主维权维的什么权？特斯拉还巴不得你闹，那就是最好的促销广告！最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2023/01/jiangjia/",
          "publishedOn": "2023-01-08T06:14:55.000Z",
          "wordCount": 1120,
          "title": "特斯拉降价，车主维权维的什么权？特斯拉还巴不得你闹，那就是最好的促销广告！",
          "imageUrl": "https://codechina.org/wp-content/uploads/2023/01/beat-jau-2swaWy4Xhb0-unsplash-e1635480270250.jpg"
        },
        {
          "id": "https://codechina.org/?p=26955",
          "author": "tinyfool",
          "description": "最近，我开始在看梁文道的《一千零一夜》，刚好听到讲《狂人日记》，讲鲁迅。 其实我上学的时候，课本上还有鲁迅，现 […]\n为什么自比鲁迅的让我觉得不像，王小波门下走狗我也觉得不好，应该是“人只有不完美 值得歌颂”最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2023/01/luxun-wangxiaobo/",
          "publishedOn": "2023-01-07T13:01:51.000Z",
          "wordCount": 1102,
          "title": "为什么自比鲁迅的让我觉得不像，王小波门下走狗我也觉得不好，应该是“人只有不完美 值得歌颂”",
          "imageUrl": "https://codechina.org/wp-content/uploads/2023/01/鲁迅3.jpeg"
        },
        {
          "id": "https://codechina.org/?p=26913",
          "author": "tinyfool",
          "description": "昨天医生联系我们，说可能今天要把他转出ICU。肺的问题可能还是很严重，但是从31号住进ICU到今天已经5天了， […]\n我爸从ICU出来了，转到了普通病房，但是还需要继续治疗最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2023/01/out-of-icu/",
          "publishedOn": "2023-01-06T01:51:08.000Z",
          "wordCount": 1117,
          "title": "我爸从ICU出来了，转到了普通病房，但是还需要继续治疗",
          "imageUrl": "https://codechina.org/wp-content/uploads/2023/01/WechatIMG13313.jpeg"
        },
        {
          "id": "https://codechina.org/?p=26850",
          "author": "tinyfool",
          "description": "昨天我提交了一个新App，2023年我的计划就是开发一系列的小App试图在独立开发领域有一份收入。但是今天一早 […]\n使用StoreKit2不再需要恢复购买按钮，但是为了审核你还需要放一个【AppStore审核手记】最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2023/01/storekit2-appstore/",
          "publishedOn": "2023-01-04T04:31:14.000Z",
          "wordCount": 1432,
          "title": "使用StoreKit2不再需要恢复购买按钮，但是为了审核你还需要放一个【AppStore审核手记】",
          "imageUrl": "https://codechina.org/wp-content/uploads/2023/01/截屏2023-01-04-12.20.26.png"
        },
        {
          "id": "https://codechina.org/?p=26842",
          "author": "tinyfool",
          "description": "每年多少我都在谈新年目标，也许公开说了，也许没有公开写文章说，自己跟自己说了，或者跟朋友聊的时候，聊过。这些年 […]\n2023年我的新年目标最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2023/01/2023-plans/",
          "publishedOn": "2023-01-04T01:29:16.000Z",
          "wordCount": 1116,
          "title": "2023年我的新年目标",
          "imageUrl": "https://codechina.org/wp-content/uploads/2023/01/Darts_in_a_dartboard.jpg"
        },
        {
          "id": "https://codechina.org/?p=26809",
          "author": "tinyfool",
          "description": "SwiftUI快速创建UI的能力非常强大，苹果还提供了PDFKit框架，所以，用SwiftUI和PDFKit可 […]\n从零开始，使用SwiftUI和PDFKit快速构建完全可定制的PDF阅读器最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2023/01/swiftui-pdfkit-pdfreader/",
          "publishedOn": "2023-01-03T13:39:05.000Z",
          "wordCount": 1226,
          "title": "从零开始，使用SwiftUI和PDFKit快速构建完全可定制的PDF阅读器",
          "imageUrl": "https://codechina.org/wp-content/uploads/2023/01/截屏2023-01-03-20.49.53.png"
        },
        {
          "id": "https://codechina.org/?p=25998",
          "author": "tinyfool",
          "description": "很多人说ChatGPT这样的人工智能已经拥有真正的人类智慧了。他们提到了许多例子，比如ChatGPT能够和人类 […]\n万能的ChatGPT真有智能了么？一篇文章让你彻底搞懂ChatGPT-人类是怎么训练出了一只聪明的莎士比亚的猴子最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2023/01/chatgpt-ai-human-principle-and-limitation/",
          "publishedOn": "2023-01-02T04:18:48.000Z",
          "wordCount": 1631,
          "title": "万能的ChatGPT真有智能了么？一篇文章让你彻底搞懂ChatGPT-人类是怎么训练出了一只聪明的莎士比亚的猴子",
          "imageUrl": "https://codechina.org/wp-content/uploads/2022/12/Monkey-typing.jpg"
        },
        {
          "id": "https://codechina.org/?p=26727",
          "author": "tinyfool",
          "description": "我今天把我父亲送进了ICU，我今天想聊聊这件事情。本来我是不太想聊这件事情，因为有一些personal的事情， […]\n2022年的最后一天，我爸白肺了，我把我爸送进了ICU最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2023/01/my-father/",
          "publishedOn": "2023-01-01T01:12:21.000Z",
          "wordCount": 1181,
          "title": "2022年的最后一天，我爸白肺了，我把我爸送进了ICU",
          "imageUrl": "https://codechina.org/wp-content/uploads/2023/01/richard-catabay-05kHY7AYCp8-unsplash.jpg"
        },
        {
          "id": "https://codechina.org/?p=26695",
          "author": "tinyfool",
          "description": "今天是2022年的最后一天。这是我最不喜欢的一年，希望是这样的最后一年。 这一年最大的主题就是封控。原本我以为 […]\n我的2022年年终总结，乏善可陈的一年最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2022/12/2022-end/",
          "publishedOn": "2022-12-30T22:35:15.000Z",
          "wordCount": 1087,
          "title": "我的2022年年终总结，乏善可陈的一年",
          "imageUrl": "https://codechina.org/wp-content/uploads/2022/12/a-rising-sun.png"
        },
        {
          "id": "https://codechina.org/?p=26668",
          "author": "tinyfool",
          "description": "头两天在网上看到这么一个帖子： 我立刻发现，这就是我的问题。 今年是一个很荒废的年头，做了很多事情，但是完成的 […]\n达芬奇综合症，我的病有名字了最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2022/12/dafenqi/",
          "publishedOn": "2022-12-30T01:25:33.000Z",
          "wordCount": 1098,
          "title": "达芬奇综合症，我的病有名字了",
          "imageUrl": "https://codechina.org/wp-content/uploads/2022/12/50b7a389890ca6dfa441760f45b70c70.jpg"
        }
      ]
    },
    {
      "title": "ChangeLog of KDr2.com",
      "feedUrl": "https://kdr2.com/misc/site-log.xml",
      "siteUrl": "http://kdr2.com/misc/",
      "articles": []
    },
    {
      "title": "卡瓦邦噶！",
      "feedUrl": "https://www.kawabangga.com/feed",
      "siteUrl": "https://www.kawabangga.com",
      "articles": [
        {
          "id": "https://www.kawabangga.com/?p=4879",
          "author": "laixintao",
          "description": "2022 年终于过去了，对于大多数人来说是糟心的一年，但我觉得也有一些指的记录的地方。 今年完成的最大的事情是 […]\nContinue reading...\nThe post 2022 年的总结 first appeared on 卡瓦邦噶！.\n\n相关文章:\n\n分享一下“稍后阅读”的 random 功能\n沉浸式工作\n心动网络宣传片的翻译\n没来的请举手\n开源的世界如此之小？！",
          "link": "https://www.kawabangga.com/posts/4879",
          "publishedOn": "2023-01-12T11:24:38.000Z",
          "wordCount": 1051,
          "title": "2022 年的总结",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Manjusaka",
      "feedUrl": "https://manjusaka.itscoder.com/atom.xml",
      "siteUrl": "https://manjusaka.blog/atom.xml",
      "articles": [
        {
          "id": "https://manjusaka.blog/posts/2023/01/07/special-case-no-space-left-on-device/",
          "author": null,
          "description": "<p>好久没写水文了，新年第一篇水文总得写一下，完成下 OKR，正好最近帮群友查了一个特殊的 No space left on device 问题，记录一下。</p>",
          "link": "https://manjusaka.blog/posts/2023/01/07/special-case-no-space-left-on-device/",
          "publishedOn": "2023-01-07T15:30:00.000Z",
          "wordCount": 1265,
          "title": "排查一个特殊的 No space left on device",
          "imageUrl": "https://user-images.githubusercontent.com/7054676/211155731-c54b1146-2daa-48b3-8e1e-294040d73201.png"
        },
        {
          "id": "https://manjusaka.blog/posts/2023/01/01/stay-simple-stay-naive/",
          "author": null,
          "description": "<p>本来想在农历年前交年终总结的，不过想了想，去年的年终总结就因为太懒导致我鸽了。所以这个“双年”怎么也得总结下2022了。不过说起来怎么还没去字节，就开始 ego 了起来。</p>",
          "link": "https://manjusaka.blog/posts/2023/01/01/stay-simple-stay-naive/",
          "publishedOn": "2023-01-01T19:00:00.000Z",
          "wordCount": 479,
          "title": "Stay Simple, Stay Naive",
          "imageUrl": "https://user-images.githubusercontent.com/7054676/166151791-40f3b47c-a649-4b9e-bb79-c58ccd263fd2.png"
        }
      ]
    },
    {
      "title": "laike9m's blog",
      "feedUrl": "https://laike9m.com/blog/rss",
      "siteUrl": "https://laike9m.com/blog/rss",
      "articles": []
    },
    {
      "title": "Frost's Blog",
      "feedUrl": "https://frostming.com/feed.xml",
      "siteUrl": "https://frostming.com",
      "articles": []
    },
    {
      "title": "Posts on Jiayuan Thoughts",
      "feedUrl": "http://blog.jiayuanzhang.com/post/index.xml",
      "siteUrl": "https://blog.jiayuanzhang.com/post/",
      "articles": []
    },
    {
      "title": "codedump的网络日志",
      "feedUrl": "https://www.codedump.info/index.xml",
      "siteUrl": "https://www.codedump.info/",
      "articles": []
    },
    {
      "title": "李辉",
      "feedUrl": "https://greyli.com/feed",
      "siteUrl": "https://greyli.com",
      "articles": [
        {
          "id": "https://greyli.com/?p=4718",
          "author": "李辉",
          "description": "搬到了一个能晒到太阳的房子，就在森林（公园）旁边。晚上十二点钟还能听到一班火车慢悠悠驶过的声音。 房子在马路边 […]",
          "link": "https://greyli.com/sunroom/",
          "publishedOn": "2023-01-06T12:57:20.000Z",
          "wordCount": 236,
          "title": "晒得到太阳的房子",
          "imageUrl": "https://greyli.com/wp-content/uploads/2020/07/avatar.jpg"
        }
      ]
    },
    {
      "title": "�Ʒ�� BLOG",
      "feedUrl": "https://blog.codingnow.com/atom.xml",
      "siteUrl": "https://blog.codingnow.com/",
      "articles": [
        {
          "id": "https://blog.codingnow.com/2023/01/mod.html",
          "author": null,
          "description": "�ϴ�̸��Ϸ����������ļ�ϵͳ��ȥ�� 10 ���ˡ��������������һЩ�޸ġ� ���ǵ������ļ�ϵͳ����������ģʽ��һ��ģʽ��Ҫ���ڱ༭���Ϳ������������е��ļ�����·��������ԭ���ļ�ϵͳ�����ǽ����༭��ģʽ����һ��ģʽ����Ϊ����ʱģʽ����Ҫ��������ʱ�������ļ��������� git �ֿ����ʽ�����ļ����ݵ� hash ֵ���ļ�����������һ�� Merkle tree �ϣ���ͨ��һ��ר�ŵ� file server Ϊ���л����ṩ��Դ�ĸ��·��� �ڱ༭��ģʽ�£�������ֱ��ӳ��ԭ���ļ�ϵͳ������Ŀ¼���ģ�����������һ�� mount ���ã����԰Ѻܶ಻ͬ��Ŀ¼װ����һ�𡣵�����ô�����ϣ���ṩһ�������ȣ�������Ϸ��Ŀ���԰������ṩ�Ļ������ܺ���Դ��װ������...",
          "link": "https://blog.codingnow.com/2023/01/mod.html",
          "publishedOn": "2023-01-10T02:13:35.000Z",
          "wordCount": 178,
          "title": "�����ļ�ϵͳ�� mod ����",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "piglei",
      "feedUrl": "https://www.zlovezl.cn/feeds/latest",
      "siteUrl": "http://www.zlovezl.cn/",
      "articles": [
        {
          "id": "https://www.zlovezl.cn/articles/if-programming-is-writing/",
          "author": null,
          "description": "很多人会把编程比作写作，比如《Thinking in Java》的作者 Bruce Eckel 就说：“程序员就是作家。”二者的确也有许多相似之处，好文章和好代码，都离不精确的结构与优美的表达。写作时，每个人都能用词语拼出句子，组成文章，但并非所有人都能写出好文章，编程也是一样。\n不过严格来说，编程和写作虽有少许相似，却仍是两个迥异的技能，在很多方面差别很大。比如我们很少会重写一篇已发表的文章，但重构一段能正常运行的代码实属家常便饭。\n不过这一次，我们不妨把编程中那些复杂概念抛掷一旁，来一次奇思妙想：“如果编程就是写作，我们能从中学到些什么？”\n1. 使用人称代词\n写文章时，我们常常会使用人称代词来指代人物的名字，以此减少冗余，提升文本的流畅度。这个技巧当然也可以用到编程中。\n以下代码重复使用了一个冗长的表达式：\ndef run_server():\n    if check(data.servier_config.host):\n        start_server(data.servier_config.host)\n    else:\n        logger.error('Server %s is invalid.', data.servier_config.host)\n\n定义一个临时变量，作为代词使用来简化代码：\ndef run_server():\n    host = data.servier_config.host\n    if check(host):\n        start_server(host)\n    else:\n        logger.error('Server %s is invalid.', host)\n\n2. 搭配使用长短句\n写作时， 如何选择句子的长短是一门学问。汪曾祺说过：“语言的奥秘，说穿了不过是长句与短句的搭配。”长句信息…",
          "link": "https://www.zlovezl.cn/articles/if-programming-is-writing/",
          "publishedOn": "2023-01-13T00:50:17.196Z",
          "wordCount": 371,
          "title": "如果编程就是写作",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/chatgpt-and-how-we-programming/",
          "author": null,
          "description": "多年以来，编程一直是我生命最重要的快乐来源之一，我从没细想过这份快乐能伴随我多久。但就在几天前，在观摩了 ChatGPT 替我编写一个 Python 程序的全过程后，我突然有种强烈的感觉：不远的将来，人们能从编程中获得的乐趣可能会逐渐消失。\n换句话说，ChatGPT 正在缓慢地“杀死”编程里的乐趣。在解释这个观点之前，让我先带你简单回顾一下：ChatGPT 到底帮我写了个什么程序。\n用 ChatGPT 编写程序\n先简单介绍一下 ChatGPT。ChatGPT 是人工智能公司 OpenAI 在 2022 年 11 月份推出的基于 GPT 自然语言生成模型的聊天机器人。它功能强大，能轻松完成许多在人类眼中非常复杂的任务，比方说：根据你描述的需求写一个可运行的程序。\n前天晚上十一点左右，我正坐在床上刷手机，突然想起一个给路由器用的工具脚本，已经拖延了几个月都没动工。既然自己不愿写，不如这次试试让 ChatGPT 来帮我完成。\n这个工具的需求简述如下：\n接收一个 URL 地址作为参数，将该 URL 里的域名，以及该 URL 所返回的页面里的所有域名，一并转换成 dnsmasq 服务的配置条目，写入到 /etc/dnsmasq.conf 文件中（需要考虑重复写入）。\n为了让 ChatGPT 写代码，我需要用自然语言清楚描述程序的用途和大概的执行流程，这个过程花了我 5 分钟左右。\n需求描述如下：\nWrite a Python program, it accepts an URL address url from command line input, the program extract the domain name from url and stores it in a variable called src_domain, then it starts to request …",
          "link": "https://www.zlovezl.cn/articles/chatgpt-and-how-we-programming/",
          "publishedOn": "2023-01-12T00:49:32.644Z",
          "wordCount": 484,
          "title": "ChatGPT 正在杀死编程里的乐趣",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/",
          "author": null,
          "description": "让我们从两行最简单的 Python 代码开始。\n>>> name = 'piglei'\n>>> print(f'Hello {name}!')\nHello piglei!\n\n这是一个“Hello World”程序，你也许已经见过它无数次，对里面的每个字母都了如指掌。但你可能从未意识到，上面两行代码，刚好对应着 Python 语言里的两个重要概念：语句（statement） 和 表达式（expression）。\n具体来说，name = 'piglei' 是一行赋值语句，它将字符串 'piglei' 赋给了 name 变量。print(f'Hello {name}!') 则是一个表达式，它通过调用内置函数 print 往屏幕打印信息。\n表达式的特点\n编写代码时，语句和表达式是两类最基本的代码单元。\n虽然在日常表达中，我们会把语句和表达式区分开来，但二者并非完全不同——表达式实际上就是一种特殊的语句。和普通语句比起来，表达式的特别之处在于它拥有一个（或多个）返回值。\n举例来说，前面的 print(...) 表达式就会返回一个值：None。你可以像下面这样获取它：\n# print 函数总是返回 None\n>>> val = print(f'Hello {name}!')\nHello piglei!\n>>> val is None\nTrue\n\n虽然这么做没啥实际用途，但它足够体现出表达式的独特之处——因为你永远无法对普通语句做出类似的事情。无论是“赋值语句”、“循环语句”，还是一个“条件分支语句”，你永远都无法将其赋值给某个变量，这在语法上无从谈起：\n>>> val = (name = 'piglei')\n  File \"<stdin>\", line 1\n    val = (name = 'piglei')\n                ^\nSyntaxError: invali…",
          "link": "https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/",
          "publishedOn": "2023-01-12T00:49:32.635Z",
          "wordCount": 701,
          "title": "Python 工匠：语句、表达式和海象操作符",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/how-to-design-config-file-for-software/",
          "author": null,
          "description": "在设计和开发服务端（后端）软件时，配置文件是一个绕不开的话题。\n配置文件是一种用于存放各类可配置项的特殊文件。每个软件都会预设一些默认配置，但这些默认值不可能适用于所有情况。因此，到了不同的环境中，我们常常需要用配置文件对其进行扩展和修改。\n拿版本控制软件 git 举例。大部分用户的 home 目录（~）都存放着一份 .gitconfig 配置文件，里面写着自己的用户名和邮箱地址：\n[user]\n    name = piglei\n    email = piglei2007@gmail.com\n\n就像软件的任何一个主要功能一样，配置文件也会极大的影响软件的使用体验。良好的设计能让软件变得更易用，糟糕的设计则会带来许多意想不到的问题，将用户拒之门外。\n在这篇文章中，我整理了 4 条关于“软件配置文件”的设计建议，希望能对你有所帮助。\n1. 最好不给配置也能用\n在网络世界里，每过一天，人们的耐心似乎就又比前一天减少了一丁点。一个制作精良的短视频，如果 3 秒钟之内无法抓住你，你的右手拇指就会条件反射般将它划走。\n现在，假设你开发了一个非常有用的工具软件，并发布到了网上。软件的功能非常全面，所有人在使用它之前，需要编辑一份包含 20 项配置的配置文件。你猜，有多大比例的潜在用户会直接掉头走掉？\n当我们想要一件东西时，总是一刻也不想等。因此，初始的配置过程麻烦与否，会强烈影响人们尝试软件的决心。在这方面，我认为最好的体验是：无需提供任何配置，便能直接使用软件 80% 以上的功能。\n假如无法做到这一点，我们也应该试着从以下几个方面着手，尽量降低用户的配置成本，压缩从“开始安装”到“可使用”之间的等待时间。\n1.1 预设合理的默认值\n为了将必须由用户提供的配置项，压缩到最少。你得给软件的所有配置项预设一个足够合理的默认值。这些默认值应当能让尽可能多的用户满意。\n举个例子，假如你的软件…",
          "link": "https://www.zlovezl.cn/articles/how-to-design-config-file-for-software/",
          "publishedOn": "2023-01-10T00:51:29.057Z",
          "wordCount": 303,
          "title": "设计服务端软件配置的 4 条建议",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/go-func-argument-patterns/",
          "author": null,
          "description": "1. 普通传参\nGo 语言支持按顺序传入参数来调用函数，下面是一个示例函数：\n// ListApplications 查询应用列表\nfunc ListApplications(limit, offset int) []Application {\n    return allApps[offset : offset+limit]\n}\n\n调用代码：\nListApplications(5, 0)\n\n当你想增加新参数时，可以直接修改函数签名。比如，下面的代码给 ListApplications 增加了新的过滤参数 owner：\nfunc ListApplications(limit, offset int, owner string) []Application {\n    if owner != \"\" {\n        // ...\n    }\n    return allApps[offset : offset+limit]\n}\n\n调用代码也需要随之改变：\nListApplications(5, 0, \"piglei\")\n// 不使用 owner 过滤\nListApplications(5, 0, \"\")\n\n显而易见，这种普通传参模式存在以下几个明显的问题：\n可读性不佳：只支持用位置，不支持用关键字来区分参数，参数变多后，各参数含义很难一目了然\n破坏兼容性：增加新参数后，原有调用代码必须进行对应修改，比如像上方的 ListApplications(5, 0, \"\") 一样，在 owner 参数的位置传递空字符串\n为了解决这些问题，常见的做法是引入一个参数结构体（struct）类型。\n2. 使用参数结构体\n新建一个结构体类型，里面包含函数需要支持的所有参数：\n// ListAppsOptions 是查询应用列表时的可选项\ntype ListAppsOptions struct …",
          "link": "https://www.zlovezl.cn/articles/go-func-argument-patterns/",
          "publishedOn": "2023-01-02T00:46:46.317Z",
          "wordCount": 719,
          "title": "Go 的几种函数传参模式",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "静觅",
      "feedUrl": "https://cuiqingcai.com/atom.xml",
      "siteUrl": "/atom.xml",
      "articles": []
    },
    {
      "title": "咸糖 - 自律者自由",
      "feedUrl": "https://vim0.com/index.xml",
      "siteUrl": "https://vim0.com/",
      "articles": [
        {
          "id": "https://vim0.com/post/2022/",
          "author": null,
          "description": "今天是 2023 年的第一天，我想写一篇年终总结，回顾一下 2022 年的一些事情。 同时也是一个自我的回顾。 2022 年终总结 2022 年是一个不大顺利的一年， 似乎因为经济下行",
          "link": "https://vim0.com/post/2022/",
          "publishedOn": "2023-01-01T08:30:40.000Z",
          "wordCount": 271,
          "title": "2022 年终总结",
          "imageUrl": "https://vim0.com/post/main_cover.png"
        }
      ]
    },
    {
      "title": "离别歌",
      "feedUrl": "https://www.leavesongs.com/feed",
      "siteUrl": "https://www.leavesongs.com",
      "articles": [
        {
          "id": "https://www.leavesongs.com/THINK/talk-about-2022.html",
          "author": "phithon",
          "description": "现在是2022年12月31日晚上8点43分，还有3个多小时今年就过完了，就如同某个其他公司的年终总结一样，这一年发生了太多的事情。但是这些事情距离我是遥远与模糊的，这里还是用简短的篇幅说点和自己相关联的。\n生活\n距离我发表《出中国记》一年左右，新加坡的物价以肉眼可见的速度上涨，已不太适合在国内事业稳定的人前往。而我属于随遇而安的人，到哪里就在哪里躺下，已经逐渐习惯新加坡的生活。\n说起物价，不得不提",
          "link": "https://www.leavesongs.com/THINK/talk-about-2022.html",
          "publishedOn": "2023-01-01T00:54:30.875Z",
          "wordCount": 142,
          "title": "2022年终总结",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "张戈博客",
      "feedUrl": "https://zhangge.net/feed",
      "siteUrl": "https://zhang.ge",
      "articles": []
    },
    {
      "title": "Reimu's blog",
      "feedUrl": "https://blog.k8s.li/atom.xml",
      "siteUrl": "/atom.xml",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}