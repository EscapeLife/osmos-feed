<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.escapelife.site/osmos-feed/index.html</id>
    <title>escapelife::feed</title>
    <updated>2023-04-02T00:48:19.429Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://www.escapelife.site/osmos-feed/index.html"/>
    <link rel="self" href="https://www.escapelife.site/osmos-feed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[伊隆马斯克等1000多名精英签名呼吁暂停AI的发展，到底是怎么回事儿？]]></title>
        <id>https://codechina.org/?p=29111</id>
        <link href="https://codechina.org/2023/04/chatgpt-letter/"/>
        <updated>2023-04-01T17:56:38.000Z</updated>
        <summary type="html"><![CDATA[最近有一个新闻，是说有1000多名精英，包括马斯克美国精英签名呼吁所有的人工智能实验室立即暂停比GPT-4更强 […]
伊隆马斯克等1000多名精英签名呼吁暂停AI的发展，到底是怎么回事儿？最先出现在Tinyfool的个人网站。]]></summary>
        <author>
            <name>tinyfool</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[有关 MTU 和 MSS 的一切]]></title>
        <id>https://www.kawabangga.com/?p=4983</id>
        <link href="https://www.kawabangga.com/posts/4983"/>
        <updated>2023-04-01T10:23:04.000Z</updated>
        <summary type="html"><![CDATA[最近因为遇到了一个和 MSS 有关的问题，所以花了很多时间学习相关的东西。过程中又发现网上有很多相关的内容是错 […]
Continue reading...
The post 有关 MTU 和 MSS 的一切 first appeared on 卡瓦邦噶！.]]></summary>
        <author>
            <name>laixintao</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[�� ID hash ӳ�������]]></title>
        <id>https://blog.codingnow.com/2023/03/short_id_hash.html</id>
        <link href="https://blog.codingnow.com/2023/03/short_id_hash.html"/>
        <updated>2023-03-30T06:24:01.000Z</updated>
        <summary type="html"><![CDATA[��������һ�����⣬���ú���Ȥ�������뷢�����أ�����һ���仰˵���塣����дһƪ blog ��¼һ�¡� �������ڿ�������Ϸ�У�����һ�� id ����ʾһ����Ϸ���󵽵���ʲô�����磬����Ƭ�� �� 1 ����ú�� �� 2 �����ɿ���� �� 3 ���� ������������ʱ��C ������Ը��ݶ�������ͷ���Ĳ�ѯ��������ԡ������������������ Lua ���úã��������ڲ���ġ�����ÿȼ��һ����λ�ġ�ú�������Բ��� 100KJ ��������һ�䡰��Ƭ���� 100 ���� Ϊ���� C �� Lua ����ٹ�����Щ�������ݣ��һ�ר��д��һ�� cache ģ�� �� ������� ID �ĳ־û��ϡ���Ϊ��Ϸ�е���Ʒ���ಢ�����ر�࣬����ʱ���Լ��ռ����ܵĿ������Ұ� ID ���Ϊ 16bits ��64K ����Ʒ��������޿������㹻�ˡ��� ID...]]></summary>
        <author>
            <name>�Ʒ�� BLOG</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[����ѧϰ������]]></title>
        <id>https://blog.codingnow.com/2023/03/cnn.html</id>
        <link href="https://blog.codingnow.com/2023/03/cnn.html"/>
        <updated>2023-03-23T07:14:54.000Z</updated>
        <summary type="html"><![CDATA[���ʱ��æ��Ϸ��Ŀ֮�⣬�������˼���ѧϰ�����硣 ��һƪ blog �����Ժ��յ���ͼ������ѵ� email ��Ȼ�����յ���һ��ѣ��ű���ͼ�����Ĺ����˹����ܵ������顣ͨ���������ͬѧ�����ʼ����飬��������ϣ������д��ʲô���Ҳ����������������飬�����ǲ������Ƽ�һЩ���Լ������Ĳ��ٵĶ����� ����յ�����̫�࣬��Ȼû��ȫ�����ꡣ�������������Զ���ǿ�����һ�����⣩��ȥ���ʱ���Ҷ��ˡ�����Ķ�һ���顷�������ᵽ������ĸ���Ρ����ĸ���ξ��Ǿ�һ������ͬʱ���౾���Ƿǳ�������ġ���Σ���Ҳ�����ջ�...]]></summary>
        <author>
            <name>�Ʒ�� BLOG</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go 的几种函数传参模式]]></title>
        <id>https://www.piglei.com/articles/go-func-argument-patterns/</id>
        <link href="https://www.piglei.com/articles/go-func-argument-patterns/"/>
        <updated>2023-03-23T00:45:49.271Z</updated>
        <summary type="html"><![CDATA[1. 普通传参
Go 语言支持按顺序传入参数来调用函数，下面是一个示例函数：
// ListApplications 查询应用列表
func ListApplications(limit, offset int) []Application {
    return allApps[offset : offset+limit]
}

调用代码：
ListApplications(5, 0)

当你想增加新参数时，可以直接修改函数签名。比如，下面的代码给 ListApplications 增加了新的过滤参数 owner：
func ListApplications(limit, offset int, owner string) []Application {
    if owner != "" {
        // ...
    }
    return allApps[offset : offset+limit]
}

调用代码也需要随之改变：
ListApplications(5, 0, "piglei")
// 不使用 owner 过滤
ListApplications(5, 0, "")

显而易见，这种普通传参模式存在以下几个明显的问题：
可读性不佳：只支持用位置，不支持用关键字来区分参数，参数变多后，各参数含义很难一目了然
破坏兼容性：增加新参数后，原有调用代码必须进行对应修改，比如像上方的 ListApplications(5, 0, "") 一样，在 owner 参数的位置传递空字符串
为了解决这些问题，常见的做法是引入一个参数结构体（struct）类型。
2. 使用参数结构体
新建一个结构体类型，里面包含函数需要支持的所有参数：
// ListAppsOptions 是查询应用列表时的可选项
type ListAppsOptions struct …]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[如果编程就是写作]]></title>
        <id>https://www.piglei.com/articles/if-programming-is-writing/</id>
        <link href="https://www.piglei.com/articles/if-programming-is-writing/"/>
        <updated>2023-03-23T00:45:49.204Z</updated>
        <summary type="html"><![CDATA[很多人会把编程比作写作，比如《Thinking in Java》的作者 Bruce Eckel 就说：“程序员就是作家。”二者的确也有许多相似之处，好文章和好代码，都离不精确的结构与优美的表达。写作时，每个人都能用词语拼出句子，组成文章，但并非所有人都能写出好文章，编程也是一样。
不过严格来说，编程和写作虽有少许相似，却仍是两个迥异的技能，在很多方面差别很大。比如我们很少会重写一篇已发表的文章，但重构一段能正常运行的代码实属家常便饭。
不过这一次，我们不妨把编程中那些复杂概念抛掷一旁，来一次奇思妙想：“如果编程就是写作，我们能从中学到些什么？”
1. 使用人称代词
写文章时，我们常常会使用人称代词来指代人物的名字，以此减少冗余，提升文本的流畅度。这个技巧当然也可以用到编程中。
以下代码重复使用了一个冗长的表达式：
def run_server():
    if check(data.servier_config.host):
        start_server(data.servier_config.host)
    else:
        logger.error('Server %s is invalid.', data.servier_config.host)

定义一个临时变量，作为代词使用来简化代码：
def run_server():
    host = data.servier_config.host
    if check(host):
        start_server(host)
    else:
        logger.error('Server %s is invalid.', host)

2. 搭配使用长短句
写作时， 如何选择句子的长短是一门学问。汪曾祺说过：“语言的奥秘，说穿了不过是长句与短句的搭配。”长句信息…]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 工匠：语句、表达式和海象操作符]]></title>
        <id>https://www.piglei.com/articles/stmt-expr-and-walrus-operator/</id>
        <link href="https://www.piglei.com/articles/stmt-expr-and-walrus-operator/"/>
        <updated>2023-03-23T00:45:49.191Z</updated>
        <summary type="html"><![CDATA[让我们从两行最简单的 Python 代码开始。
>>> name = 'piglei'
>>> print(f'Hello {name}!')
Hello piglei!

这是一个“Hello World”程序，你也许已经见过它无数次，对里面的每个字母都了如指掌。但你可能从未意识到，上面两行代码，刚好对应着 Python 语言里的两个重要概念：语句（statement） 和 表达式（expression）。
具体来说，name = 'piglei' 是一行赋值语句，它将字符串 'piglei' 赋给了 name 变量。print(f'Hello {name}!') 则是一个表达式，它通过调用内置函数 print 往屏幕打印信息。
表达式的特点
编写代码时，语句和表达式是两类最基本的代码单元。
虽然在日常表达中，我们会把语句和表达式区分开来，但二者并非完全不同——表达式实际上就是一种特殊的语句。和普通语句比起来，表达式的特别之处在于它拥有一个（或多个）返回值。
举例来说，前面的 print(...) 表达式就会返回一个值：None。你可以像下面这样获取它：
# print 函数总是返回 None
>>> val = print(f'Hello {name}!')
Hello piglei!
>>> val is None
True

虽然这么做没啥实际用途，但它足够体现出表达式的独特之处——因为你永远无法对普通语句做出类似的事情。无论是“赋值语句”、“循环语句”，还是一个“条件分支语句”，你永远都无法将其赋值给某个变量，这在语法上无从谈起：
>>> val = (name = 'piglei')
  File "<stdin>", line 1
    val = (name = 'piglei')
                ^
SyntaxError: invali…]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT 正在杀死编程里的乐趣]]></title>
        <id>https://www.piglei.com/articles/chatgpt-and-how-we-programming/</id>
        <link href="https://www.piglei.com/articles/chatgpt-and-how-we-programming/"/>
        <updated>2023-03-23T00:45:49.133Z</updated>
        <summary type="html"><![CDATA[多年以来，编程一直是我生命最重要的快乐来源之一，我从没细想过这份快乐能伴随我多久。但就在几天前，在观摩了 ChatGPT 替我编写一个 Python 程序的全过程后，我突然有种强烈的感觉：不远的将来，人们能从编程中获得的乐趣可能会逐渐消失。
换句话说，ChatGPT 正在缓慢地“杀死”编程里的乐趣。在解释这个观点之前，让我先带你简单回顾一下：ChatGPT 到底帮我写了个什么程序。
用 ChatGPT 编写程序
先简单介绍一下 ChatGPT。ChatGPT 是人工智能公司 OpenAI 在 2022 年 11 月份推出的基于 GPT 自然语言生成模型的聊天机器人。它功能强大，能轻松完成许多在人类眼中非常复杂的任务，比方说：根据你描述的需求写一个可运行的程序。
前天晚上十一点左右，我正坐在床上刷手机，突然想起一个给路由器用的工具脚本，已经拖延了几个月都没动工。既然自己不愿写，不如这次试试让 ChatGPT 来帮我完成。
这个工具的需求简述如下：
接收一个 URL 地址作为参数，将该 URL 里的域名，以及该 URL 所返回的页面里的所有域名，一并转换成 dnsmasq 服务的配置条目，写入到 /etc/dnsmasq.conf 文件中（需要考虑重复写入）。
为了让 ChatGPT 写代码，我需要用自然语言清楚描述程序的用途和大概的执行流程，这个过程花了我 5 分钟左右。
需求描述如下：
Write a Python program, it accepts an URL address url from command line input, the program extract the domain name from url and stores it in a variable called src_domain, then it starts to request …]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[入行 14 年，我还是觉得编程很难]]></title>
        <id>https://www.piglei.com/articles/programming-is-still-hard-after-14-years/</id>
        <link href="https://www.piglei.com/articles/programming-is-still-hard-after-14-years/"/>
        <updated>2023-03-23T00:45:49.096Z</updated>
        <summary type="html"><![CDATA[很多年前，当我还是一名计算机专业的大四学生时，整天上网浏览各类招聘信息，想找到一个合适的程序员实习岗位。
除了实习岗位外，我偶尔也会点进一些“高级工程师”的招聘帖里。现在回想起那些帖子，抛开让人眼花缭乱的技术名词，我印象最深的就是常出现在第一行的岗位年限要求：“本职位要求 工作经验 5 年以上”。
作为一只一天班都没上过的小菜鸟，这些年限要求在我眼里简直长到夸张。不过，望洋兴叹之余，我有时也会在心中暗暗憧憬一下：“五年工作经验的程序员，那该多厉害啊？写代码对于他们来说，是不是像吃饭一样简单？”
时光荏苒，一晃十几年过去了。如今回头一望，自己也成了一名有着 14 年工作经验的光荣打工人。在软件开发行业摸爬滚打这些年后，我发现很多事情，与我在大四时所想象的大不相同，比方说：
随着经验增长，编程并不会变简单太多，“像吃饭一样简单”只出现在梦里
给许多“大项目”写代码不光没意思，还很危险，远不如在 LeetCode 上做一道算法题有趣
只从技术角度思考问题，成不了好程序员，有些东西远比技术更重要
细想起来，这类关于编程的感触还有许多。我整理了其中 8 条，写成了这篇文章。如果其中某些观点引起了你的共鸣，我会非常高兴。
1. 写代码很简单，但写好代码很难
编程曾经是一项门槛很高的专业技能。从前，一个普通人想学编程，最常见的做法就是通过教材和书本学习。不过大部分编程专业书，十分艰深晦涩，对于初学者来说很不友好。因此不少人在尝到编程的乐趣前，就早早地半途而废。
但如今，学编程正在变得越来越容易。学习不再像以前那样，只能硬啃书本，而是多了许多新途径。观看教学视频、参加 Codecademy 的交互式课程，甚至直接在 CodeCombat 通过玩游戏来学编程，每个人都能找到适合自己的学习方式。

“妈，我真没在玩游戏，我在学编程呢！你看屏幕右边！”
此外，编程语言也在变得越来越易用。经典的 …]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[由一个子网掩码配置错误所想到的]]></title>
        <id>https://www.kawabangga.com/?p=4960</id>
        <link href="https://www.kawabangga.com/posts/4960"/>
        <updated>2023-03-20T11:41:56.000Z</updated>
        <summary type="html"><![CDATA[今天线上发现了一个机器的子网掩码配置错了，其实问题比较简单，一开始没有想到会是这个问题，想了好久才想到这里。  […]
Continue reading...
The post 由一个子网掩码配置错误所想到的 first appeared on 卡瓦邦噶！.]]></summary>
        <author>
            <name>laixintao</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django下防御Race Condition漏洞]]></title>
        <id>https://www.leavesongs.com/PENETRATION/django-race-condition-defense.html</id>
        <link href="https://www.leavesongs.com/PENETRATION/django-race-condition-defense.html"/>
        <updated>2023-03-19T15:54:00.000Z</updated>
        <summary type="html"><![CDATA[今天下午在v2ex上看到一个帖子，讲述自己因为忘记加分布式锁导致了公司的损失。本文以此为题，介绍一下在Django下如何正确测试与修复Race Condition问题。]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 193 期）：前端与后端，谁更难？]]></title>
        <id>http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html</id>
        <link href="http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html"/>
        <updated>2022-01-21T00:48:38.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。（[通知] 下周欢度春节，周刊暂停，2月11日恢复。）...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 192 期）：最大的机会来自新技术]]></title>
        <id>http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html</id>
        <link href="http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html"/>
        <updated>2022-01-14T00:39:50.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
</feed>