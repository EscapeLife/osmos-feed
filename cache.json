{
  "sources": [
    {
      "title": "Escape",
      "feedUrl": "https://www.escapelife.site/atom.xml",
      "siteUrl": "https://www.escapelife.site/atom.xml",
      "articles": []
    },
    {
      "title": "酷 壳 – CoolShell",
      "feedUrl": "https://coolshell.cn/feed",
      "siteUrl": "https://coolshell.cn",
      "articles": [
        {
          "id": "https://coolshell.cn/?p=22398",
          "author": "陈皓",
          "description": "两个月前，我试着想用 ChatGPT 帮我写篇文章《eBPF 介绍》，结果错误百处，导致我又要从头改一遍，从那天我觉得 ChatGPT 生成的内容完全不靠谱，所...\n Read More  Read More\n我看ChatGPT: 为啥谷歌掉了千亿美金 first appeared on 酷 壳 - CoolShell.",
          "link": "https://coolshell.cn/articles/22398.html",
          "publishedOn": "2023-02-11T16:31:16.000Z",
          "wordCount": 1430,
          "title": "我看ChatGPT: 为啥谷歌掉了千亿美金",
          "imageUrl": "https://coolshell.cn/wp-content/uploads/2023/02/chatgpt.jpg"
        }
      ]
    },
    {
      "title": "阮一峰的网络日志",
      "feedUrl": "https://www.ruanyifeng.com/blog/atom.xml",
      "siteUrl": "http://www.ruanyifeng.com/blog/",
      "articles": [
        {
          "id": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html",
          "author": null,
          "description": "这里记录每周值得分享的科技内容，周五发布。（[通知] 下周欢度春节，周刊暂停，2月11日恢复。）...",
          "link": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html",
          "publishedOn": "2022-01-21T00:48:38.000Z",
          "wordCount": 320,
          "title": "科技爱好者周刊（第 193 期）：前端与后端，谁更难？"
        },
        {
          "id": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html",
          "author": null,
          "description": "这里记录每周值得分享的科技内容，周五发布。...",
          "link": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html",
          "publishedOn": "2022-01-14T00:39:50.000Z",
          "wordCount": 407,
          "title": "科技爱好者周刊（第 192 期）：最大的机会来自新技术"
        }
      ]
    },
    {
      "title": "MacTalk-池建强的随想录",
      "feedUrl": "https://macshuo.com/?feed=rss2",
      "siteUrl": "https://macshuo.com",
      "articles": []
    },
    {
      "title": "Tinyfool的个人网站",
      "feedUrl": "http://feeds.feedburner.com/Tinyfoolblog",
      "siteUrl": "https://codechina.org/",
      "articles": [
        {
          "id": "https://codechina.org/?p=27930",
          "author": "tinyfool",
          "description": "ChatGPT 最近非常火爆，甚至完全出圈。早在 GPT-3 发布的时候，我就非常关注。但是当时没进行具体的开 […]\nOpenAI GPT API 初探：价格，成本、模型选择以及摘要篇最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2023/02/openai-gpt-api-summarize/",
          "publishedOn": "2023-02-14T13:54:49.000Z",
          "wordCount": 2322,
          "title": "OpenAI GPT API 初探：价格，成本、模型选择以及摘要篇",
          "imageUrl": "https://codechina.org/wp-content/uploads/2023/02/tinyfoolus_an_old_chinese_coder_is_coding_in_a_seaside_coffee_785c6a97-233f-4638-b816-a66b2873c654.png"
        }
      ]
    },
    {
      "title": "ChangeLog of KDr2.com",
      "feedUrl": "https://kdr2.com/misc/site-log.xml",
      "siteUrl": "http://kdr2.com/misc/",
      "articles": []
    },
    {
      "title": "卡瓦邦噶！",
      "feedUrl": "https://www.kawabangga.com/feed",
      "siteUrl": "https://www.kawabangga.com",
      "articles": [
        {
          "id": "https://www.kawabangga.com/?p=4925",
          "author": "laixintao",
          "description": "这几天做了一个集群的迁移，我们搭建了一个新的集群，然后更新了 DNS 让域名访问新的集群，准备给老集群下线。下 […]\nContinue reading...\nThe post Tcpdump 从 TCP_option_address 中根据真实 IP 过滤 first appeared on 卡瓦邦噶！.\n\n相关文章:\n\n你的Linux上有一个超酷的 TCP 代理！\n博客迁移到 Cloudflare\nHTTP 长连接",
          "link": "https://www.kawabangga.com/posts/4925",
          "publishedOn": "2023-02-19T16:33:29.000Z",
          "wordCount": 1113,
          "title": "Tcpdump 从 TCP_option_address 中根据真实 IP 过滤",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Manjusaka",
      "feedUrl": "https://manjusaka.itscoder.com/atom.xml",
      "siteUrl": "https://manjusaka.blog/atom.xml",
      "articles": []
    },
    {
      "title": "laike9m's blog",
      "feedUrl": "https://laike9m.com/blog/rss",
      "siteUrl": "https://laike9m.com/blog/rss",
      "articles": []
    },
    {
      "title": "Frost's Blog",
      "feedUrl": "https://frostming.com/feed.xml",
      "siteUrl": "https://frostming.com",
      "articles": [
        {
          "id": "https://frostming.com/2023/python-packaging-status/",
          "author": "mianghong@gmail.com (Frost Ming)",
          "description": "",
          "link": "https://frostming.com/2023/python-packaging-status/",
          "publishedOn": "2023-02-09T00:00:00.000Z",
          "wordCount": 1524,
          "title": "Python 打包的新动态",
          "imageUrl": "https://static.frostming.com/images/pypa.png"
        }
      ]
    },
    {
      "title": "Posts on Jiayuan Thoughts",
      "feedUrl": "http://blog.jiayuanzhang.com/post/index.xml",
      "siteUrl": "https://blog.jiayuanzhang.com/post/",
      "articles": []
    },
    {
      "title": "codedump的网络日志",
      "feedUrl": "https://www.codedump.info/index.xml",
      "siteUrl": "https://www.codedump.info/",
      "articles": []
    },
    {
      "title": "李辉",
      "feedUrl": "https://greyli.com/feed",
      "siteUrl": "https://greyli.com",
      "articles": [
        {
          "id": "https://greyli.com/?p=4987",
          "author": "李辉",
          "description": "今年地球转得也太快了。听同事说，开始工作以后，地球转速加快是正常现象，结了婚和有孩子后还会有额外加成。考虑到地 […]",
          "link": "https://greyli.com/2022-summary/",
          "publishedOn": "2023-02-11T10:45:25.000Z",
          "wordCount": 322,
          "title": "2022 年总结",
          "imageUrl": "https://greyli.com/wp-content/uploads/2020/07/avatar.jpg"
        }
      ]
    },
    {
      "title": "�Ʒ�� BLOG",
      "feedUrl": "https://blog.codingnow.com/atom.xml",
      "siteUrl": "https://blog.codingnow.com/",
      "articles": [
        {
          "id": "https://blog.codingnow.com/2023/02/aura.html",
          "author": null,
          "description": "���ܿ����� Redis ���ߵ���������� Aocla ���о��������������� FORTH �� Lisp ���Ӻ��壬��������һЩ��Ƕ�ֲ�������֧�֡��ǳ�����ǰ�����������ѧ������һ��С������������뷨��Ϊ��ѧ�����һ�� DSL Ǳ�� Lua ���������ӵ���ѧ�������ʱ�����԰Ѽ������ͣ���� C Side ������ Lua �� C ֮��ı߽�ɱ�������İ汾����ģ�� FORTH ��ƵĻ���ջ��С���ԡ�ϣ������һЩ������������ȡһ�����ܡ���ʵ���������ڱ�Ť��������������һЩ����ȴû�б��ʸĽ���������ھ�������� DSL ���״���ѧ���а����� ��...",
          "link": "https://blog.codingnow.com/2023/02/aura.html",
          "publishedOn": "2023-02-14T02:19:58.000Z",
          "wordCount": 351,
          "title": "Aura һ��Ƕ��ʽС����",
          "imageUrl": null
        },
        {
          "id": "https://blog.codingnow.com/2023/02/multiple_components.html",
          "author": null,
          "description": "ECS �У�ͬһ�� Entity �Ƿ�����ɶ��ͬ���͵� Component ���ɣ��� Unity �У����ǿ��ԡ����ǵ����������֮��Ҳ�ǿ��Եġ� ��ʱ��һ�����⣺�� Lua �У���η���ͬ���͵� Component ������ж��ͬ�� Component ������Ȼ�ķ�ʽ�ǰ����Ƿ���һ����������ǡ������������������ò���������ԣ�ÿ�η��� Component ����һ�� [1] �� [0] �����������Եû������㡣������ Component �������飬����������飬д�������м�������Ǹ�������Ϊ�����������Ǿͳ���������ͬ�����͡� ���������Ǹɴ����� Lua �����ԣ�������� Component ��������һ�� table �С�����ж�� Component �Ͱ��������ֱ�ӷ��ڵ�һ�� Component �� table �ڡ�����������һ��ʱ���������ܲ�������༼�ɡ��ȵ��� C ��д luaecs �󣬾Ϳ�����������ԡ�...",
          "link": "https://blog.codingnow.com/2023/02/multiple_components.html",
          "publishedOn": "2023-02-06T07:26:05.000Z",
          "wordCount": 305,
          "title": "ͬһ Entity �������ͬ�� Component ������",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "piglei",
      "feedUrl": "https://www.zlovezl.cn/feeds/latest",
      "siteUrl": "http://www.zlovezl.cn/",
      "articles": [
        {
          "id": "https://www.piglei.com/articles/go-func-argument-patterns/",
          "author": null,
          "description": "1. 普通传参\nGo 语言支持按顺序传入参数来调用函数，下面是一个示例函数：\n// ListApplications 查询应用列表\nfunc ListApplications(limit, offset int) []Application {\n    return allApps[offset : offset+limit]\n}\n\n调用代码：\nListApplications(5, 0)\n\n当你想增加新参数时，可以直接修改函数签名。比如，下面的代码给 ListApplications 增加了新的过滤参数 owner：\nfunc ListApplications(limit, offset int, owner string) []Application {\n    if owner != \"\" {\n        // ...\n    }\n    return allApps[offset : offset+limit]\n}\n\n调用代码也需要随之改变：\nListApplications(5, 0, \"piglei\")\n// 不使用 owner 过滤\nListApplications(5, 0, \"\")\n\n显而易见，这种普通传参模式存在以下几个明显的问题：\n可读性不佳：只支持用位置，不支持用关键字来区分参数，参数变多后，各参数含义很难一目了然\n破坏兼容性：增加新参数后，原有调用代码必须进行对应修改，比如像上方的 ListApplications(5, 0, \"\") 一样，在 owner 参数的位置传递空字符串\n为了解决这些问题，常见的做法是引入一个参数结构体（struct）类型。\n2. 使用参数结构体\n新建一个结构体类型，里面包含函数需要支持的所有参数：\n// ListAppsOptions 是查询应用列表时的可选项\ntype ListAppsOptions struct …",
          "link": "https://www.piglei.com/articles/go-func-argument-patterns/",
          "publishedOn": "2023-02-19T00:53:22.215Z",
          "wordCount": 719,
          "title": "Go 的几种函数传参模式",
          "imageUrl": null
        },
        {
          "id": "https://www.piglei.com/articles/stmt-expr-and-walrus-operator/",
          "author": null,
          "description": "让我们从两行最简单的 Python 代码开始。\n>>> name = 'piglei'\n>>> print(f'Hello {name}!')\nHello piglei!\n\n这是一个“Hello World”程序，你也许已经见过它无数次，对里面的每个字母都了如指掌。但你可能从未意识到，上面两行代码，刚好对应着 Python 语言里的两个重要概念：语句（statement） 和 表达式（expression）。\n具体来说，name = 'piglei' 是一行赋值语句，它将字符串 'piglei' 赋给了 name 变量。print(f'Hello {name}!') 则是一个表达式，它通过调用内置函数 print 往屏幕打印信息。\n表达式的特点\n编写代码时，语句和表达式是两类最基本的代码单元。\n虽然在日常表达中，我们会把语句和表达式区分开来，但二者并非完全不同——表达式实际上就是一种特殊的语句。和普通语句比起来，表达式的特别之处在于它拥有一个（或多个）返回值。\n举例来说，前面的 print(...) 表达式就会返回一个值：None。你可以像下面这样获取它：\n# print 函数总是返回 None\n>>> val = print(f'Hello {name}!')\nHello piglei!\n>>> val is None\nTrue\n\n虽然这么做没啥实际用途，但它足够体现出表达式的独特之处——因为你永远无法对普通语句做出类似的事情。无论是“赋值语句”、“循环语句”，还是一个“条件分支语句”，你永远都无法将其赋值给某个变量，这在语法上无从谈起：\n>>> val = (name = 'piglei')\n  File \"<stdin>\", line 1\n    val = (name = 'piglei')\n                ^\nSyntaxError: invali…",
          "link": "https://www.piglei.com/articles/stmt-expr-and-walrus-operator/",
          "publishedOn": "2023-02-19T00:53:22.160Z",
          "wordCount": 701,
          "title": "Python 工匠：语句、表达式和海象操作符",
          "imageUrl": null
        },
        {
          "id": "https://www.piglei.com/articles/if-programming-is-writing/",
          "author": null,
          "description": "很多人会把编程比作写作，比如《Thinking in Java》的作者 Bruce Eckel 就说：“程序员就是作家。”二者的确也有许多相似之处，好文章和好代码，都离不精确的结构与优美的表达。写作时，每个人都能用词语拼出句子，组成文章，但并非所有人都能写出好文章，编程也是一样。\n不过严格来说，编程和写作虽有少许相似，却仍是两个迥异的技能，在很多方面差别很大。比如我们很少会重写一篇已发表的文章，但重构一段能正常运行的代码实属家常便饭。\n不过这一次，我们不妨把编程中那些复杂概念抛掷一旁，来一次奇思妙想：“如果编程就是写作，我们能从中学到些什么？”\n1. 使用人称代词\n写文章时，我们常常会使用人称代词来指代人物的名字，以此减少冗余，提升文本的流畅度。这个技巧当然也可以用到编程中。\n以下代码重复使用了一个冗长的表达式：\ndef run_server():\n    if check(data.servier_config.host):\n        start_server(data.servier_config.host)\n    else:\n        logger.error('Server %s is invalid.', data.servier_config.host)\n\n定义一个临时变量，作为代词使用来简化代码：\ndef run_server():\n    host = data.servier_config.host\n    if check(host):\n        start_server(host)\n    else:\n        logger.error('Server %s is invalid.', host)\n\n2. 搭配使用长短句\n写作时， 如何选择句子的长短是一门学问。汪曾祺说过：“语言的奥秘，说穿了不过是长句与短句的搭配。”长句信息…",
          "link": "https://www.piglei.com/articles/if-programming-is-writing/",
          "publishedOn": "2023-02-19T00:53:22.139Z",
          "wordCount": 371,
          "title": "如果编程就是写作",
          "imageUrl": null
        },
        {
          "id": "https://www.piglei.com/articles/chatgpt-and-how-we-programming/",
          "author": null,
          "description": "多年以来，编程一直是我生命最重要的快乐来源之一，我从没细想过这份快乐能伴随我多久。但就在几天前，在观摩了 ChatGPT 替我编写一个 Python 程序的全过程后，我突然有种强烈的感觉：不远的将来，人们能从编程中获得的乐趣可能会逐渐消失。\n换句话说，ChatGPT 正在缓慢地“杀死”编程里的乐趣。在解释这个观点之前，让我先带你简单回顾一下：ChatGPT 到底帮我写了个什么程序。\n用 ChatGPT 编写程序\n先简单介绍一下 ChatGPT。ChatGPT 是人工智能公司 OpenAI 在 2022 年 11 月份推出的基于 GPT 自然语言生成模型的聊天机器人。它功能强大，能轻松完成许多在人类眼中非常复杂的任务，比方说：根据你描述的需求写一个可运行的程序。\n前天晚上十一点左右，我正坐在床上刷手机，突然想起一个给路由器用的工具脚本，已经拖延了几个月都没动工。既然自己不愿写，不如这次试试让 ChatGPT 来帮我完成。\n这个工具的需求简述如下：\n接收一个 URL 地址作为参数，将该 URL 里的域名，以及该 URL 所返回的页面里的所有域名，一并转换成 dnsmasq 服务的配置条目，写入到 /etc/dnsmasq.conf 文件中（需要考虑重复写入）。\n为了让 ChatGPT 写代码，我需要用自然语言清楚描述程序的用途和大概的执行流程，这个过程花了我 5 分钟左右。\n需求描述如下：\nWrite a Python program, it accepts an URL address url from command line input, the program extract the domain name from url and stores it in a variable called src_domain, then it starts to request …",
          "link": "https://www.piglei.com/articles/chatgpt-and-how-we-programming/",
          "publishedOn": "2023-02-19T00:53:22.090Z",
          "wordCount": 484,
          "title": "ChatGPT 正在杀死编程里的乐趣",
          "imageUrl": null
        },
        {
          "id": "https://www.piglei.com/articles/programming-is-still-hard-after-14-years/",
          "author": null,
          "description": "很多年前，当我还是一名计算机专业的大四学生时，整天上网浏览各类招聘信息，想找到一个合适的程序员实习岗位。\n除了实习岗位外，我偶尔也会点进一些“高级工程师”的招聘帖里。现在回想起那些帖子，抛开让人眼花缭乱的技术名词，我印象最深的就是常出现在第一行的岗位年限要求：“本职位要求 工作经验 5 年以上”。\n作为一只一天班都没上过的小菜鸟，这些年限要求在我眼里简直长到夸张。不过，望洋兴叹之余，我有时也会在心中暗暗憧憬一下：“五年工作经验的程序员，那该多厉害啊？写代码对于他们来说，是不是像吃饭一样简单？”\n时光荏苒，一晃十几年过去了。如今回头一望，自己也成了一名有着 14 年工作经验的光荣打工人。在软件开发行业摸爬滚打这些年后，我发现很多事情，与我在大四时所想象的大不相同，比方说：\n随着经验增长，编程并不会变简单太多，“像吃饭一样简单”只出现在梦里\n给许多“大项目”写代码不光没意思，还很危险，远不如在 LeetCode 上做一道算法题有趣\n只从技术角度思考问题，成不了好程序员，有些东西远比技术更重要\n细想起来，这类关于编程的感触还有许多。我整理了其中 8 条，写成了这篇文章。如果其中某些观点引起了你的共鸣，我会非常高兴。\n1. 写代码很简单，但写好代码很难\n编程曾经是一项门槛很高的专业技能。从前，一个普通人想学编程，最常见的做法就是通过教材和书本学习。不过大部分编程专业书，十分艰深晦涩，对于初学者来说很不友好。因此不少人在尝到编程的乐趣前，就早早地半途而废。\n但如今，学编程正在变得越来越容易。学习不再像以前那样，只能硬啃书本，而是多了许多新途径。观看教学视频、参加 Codecademy 的交互式课程，甚至直接在 CodeCombat 通过玩游戏来学编程，每个人都能找到适合自己的学习方式。\n\n“妈，我真没在玩游戏，我在学编程呢！你看屏幕右边！”\n此外，编程语言也在变得越来越易用。经典的 …",
          "link": "https://www.piglei.com/articles/programming-is-still-hard-after-14-years/",
          "publishedOn": "2023-02-19T00:53:22.044Z",
          "wordCount": 503,
          "title": "入行 14 年，我还是觉得编程很难",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/if-programming-is-writing/",
          "author": null,
          "description": "很多人会把编程比作写作，比如《Thinking in Java》的作者 Bruce Eckel 就说：“程序员就是作家。”二者的确也有许多相似之处，好文章和好代码，都离不精确的结构与优美的表达。写作时，每个人都能用词语拼出句子，组成文章，但并非所有人都能写出好文章，编程也是一样。\n不过严格来说，编程和写作虽有少许相似，却仍是两个迥异的技能，在很多方面差别很大。比如我们很少会重写一篇已发表的文章，但重构一段能正常运行的代码实属家常便饭。\n不过这一次，我们不妨把编程中那些复杂概念抛掷一旁，来一次奇思妙想：“如果编程就是写作，我们能从中学到些什么？”\n1. 使用人称代词\n写文章时，我们常常会使用人称代词来指代人物的名字，以此减少冗余，提升文本的流畅度。这个技巧当然也可以用到编程中。\n以下代码重复使用了一个冗长的表达式：\ndef run_server():\n    if check(data.servier_config.host):\n        start_server(data.servier_config.host)\n    else:\n        logger.error('Server %s is invalid.', data.servier_config.host)\n\n定义一个临时变量，作为代词使用来简化代码：\ndef run_server():\n    host = data.servier_config.host\n    if check(host):\n        start_server(host)\n    else:\n        logger.error('Server %s is invalid.', host)\n\n2. 搭配使用长短句\n写作时， 如何选择句子的长短是一门学问。汪曾祺说过：“语言的奥秘，说穿了不过是长句与短句的搭配。”长句信息…",
          "link": "https://www.zlovezl.cn/articles/if-programming-is-writing/",
          "publishedOn": "2023-02-14T00:52:51.336Z",
          "wordCount": 371,
          "title": "如果编程就是写作",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/",
          "author": null,
          "description": "让我们从两行最简单的 Python 代码开始。\n>>> name = 'piglei'\n>>> print(f'Hello {name}!')\nHello piglei!\n\n这是一个“Hello World”程序，你也许已经见过它无数次，对里面的每个字母都了如指掌。但你可能从未意识到，上面两行代码，刚好对应着 Python 语言里的两个重要概念：语句（statement） 和 表达式（expression）。\n具体来说，name = 'piglei' 是一行赋值语句，它将字符串 'piglei' 赋给了 name 变量。print(f'Hello {name}!') 则是一个表达式，它通过调用内置函数 print 往屏幕打印信息。\n表达式的特点\n编写代码时，语句和表达式是两类最基本的代码单元。\n虽然在日常表达中，我们会把语句和表达式区分开来，但二者并非完全不同——表达式实际上就是一种特殊的语句。和普通语句比起来，表达式的特别之处在于它拥有一个（或多个）返回值。\n举例来说，前面的 print(...) 表达式就会返回一个值：None。你可以像下面这样获取它：\n# print 函数总是返回 None\n>>> val = print(f'Hello {name}!')\nHello piglei!\n>>> val is None\nTrue\n\n虽然这么做没啥实际用途，但它足够体现出表达式的独特之处——因为你永远无法对普通语句做出类似的事情。无论是“赋值语句”、“循环语句”，还是一个“条件分支语句”，你永远都无法将其赋值给某个变量，这在语法上无从谈起：\n>>> val = (name = 'piglei')\n  File \"<stdin>\", line 1\n    val = (name = 'piglei')\n                ^\nSyntaxError: invali…",
          "link": "https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/",
          "publishedOn": "2023-02-13T00:52:48.209Z",
          "wordCount": 701,
          "title": "Python 工匠：语句、表达式和海象操作符",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/chatgpt-and-how-we-programming/",
          "author": null,
          "description": "多年以来，编程一直是我生命最重要的快乐来源之一，我从没细想过这份快乐能伴随我多久。但就在几天前，在观摩了 ChatGPT 替我编写一个 Python 程序的全过程后，我突然有种强烈的感觉：不远的将来，人们能从编程中获得的乐趣可能会逐渐消失。\n换句话说，ChatGPT 正在缓慢地“杀死”编程里的乐趣。在解释这个观点之前，让我先带你简单回顾一下：ChatGPT 到底帮我写了个什么程序。\n用 ChatGPT 编写程序\n先简单介绍一下 ChatGPT。ChatGPT 是人工智能公司 OpenAI 在 2022 年 11 月份推出的基于 GPT 自然语言生成模型的聊天机器人。它功能强大，能轻松完成许多在人类眼中非常复杂的任务，比方说：根据你描述的需求写一个可运行的程序。\n前天晚上十一点左右，我正坐在床上刷手机，突然想起一个给路由器用的工具脚本，已经拖延了几个月都没动工。既然自己不愿写，不如这次试试让 ChatGPT 来帮我完成。\n这个工具的需求简述如下：\n接收一个 URL 地址作为参数，将该 URL 里的域名，以及该 URL 所返回的页面里的所有域名，一并转换成 dnsmasq 服务的配置条目，写入到 /etc/dnsmasq.conf 文件中（需要考虑重复写入）。\n为了让 ChatGPT 写代码，我需要用自然语言清楚描述程序的用途和大概的执行流程，这个过程花了我 5 分钟左右。\n需求描述如下：\nWrite a Python program, it accepts an URL address url from command line input, the program extract the domain name from url and stores it in a variable called src_domain, then it starts to request …",
          "link": "https://www.zlovezl.cn/articles/chatgpt-and-how-we-programming/",
          "publishedOn": "2023-02-13T00:52:48.206Z",
          "wordCount": 484,
          "title": "ChatGPT 正在杀死编程里的乐趣",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/how-to-design-config-file-for-software/",
          "author": null,
          "description": "在设计和开发服务端（后端）软件时，配置文件是一个绕不开的话题。\n配置文件是一种用于存放各类可配置项的特殊文件。每个软件都会预设一些默认配置，但这些默认值不可能适用于所有情况。因此，到了不同的环境中，我们常常需要用配置文件对其进行扩展和修改。\n拿版本控制软件 git 举例。大部分用户的 home 目录（~）都存放着一份 .gitconfig 配置文件，里面写着自己的用户名和邮箱地址：\n[user]\n    name = piglei\n    email = piglei2007@gmail.com\n\n就像软件的任何一个主要功能一样，配置文件也会极大的影响软件的使用体验。良好的设计能让软件变得更易用，糟糕的设计则会带来许多意想不到的问题，将用户拒之门外。\n在这篇文章中，我整理了 4 条关于“软件配置文件”的设计建议，希望能对你有所帮助。\n1. 最好不给配置也能用\n在网络世界里，每过一天，人们的耐心似乎就又比前一天减少了一丁点。一个制作精良的短视频，如果 3 秒钟之内无法抓住你，你的右手拇指就会条件反射般将它划走。\n现在，假设你开发了一个非常有用的工具软件，并发布到了网上。软件的功能非常全面，所有人在使用它之前，需要编辑一份包含 20 项配置的配置文件。你猜，有多大比例的潜在用户会直接掉头走掉？\n当我们想要一件东西时，总是一刻也不想等。因此，初始的配置过程麻烦与否，会强烈影响人们尝试软件的决心。在这方面，我认为最好的体验是：无需提供任何配置，便能直接使用软件 80% 以上的功能。\n假如无法做到这一点，我们也应该试着从以下几个方面着手，尽量降低用户的配置成本，压缩从“开始安装”到“可使用”之间的等待时间。\n1.1 预设合理的默认值\n为了将必须由用户提供的配置项，压缩到最少。你得给软件的所有配置项预设一个足够合理的默认值。这些默认值应当能让尽可能多的用户满意。\n举个例子，假如你的软件…",
          "link": "https://www.zlovezl.cn/articles/how-to-design-config-file-for-software/",
          "publishedOn": "2023-02-11T00:44:03.245Z",
          "wordCount": 303,
          "title": "设计服务端软件配置的 4 条建议",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "静觅",
      "feedUrl": "https://cuiqingcai.com/atom.xml",
      "siteUrl": "/atom.xml",
      "articles": []
    },
    {
      "title": "咸糖 - 自律者自由",
      "feedUrl": "https://vim0.com/index.xml",
      "siteUrl": "https://vim0.com/",
      "articles": []
    },
    {
      "title": "离别歌",
      "feedUrl": "https://www.leavesongs.com/feed",
      "siteUrl": "https://www.leavesongs.com",
      "articles": []
    },
    {
      "title": "张戈博客",
      "feedUrl": "https://zhangge.net/feed",
      "siteUrl": "https://zhang.ge",
      "articles": []
    },
    {
      "title": "Reimu's blog",
      "feedUrl": "https://blog.k8s.li/atom.xml",
      "siteUrl": "/atom.xml",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}