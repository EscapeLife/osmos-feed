{
  "sources": [
    {
      "title": "Escape",
      "feedUrl": "https://www.escapelife.site/atom.xml",
      "siteUrl": "https://www.escapelife.site/atom.xml",
      "articles": []
    },
    {
      "title": "酷 壳 – CoolShell",
      "feedUrl": "https://coolshell.cn/feed",
      "siteUrl": "https://coolshell.cn",
      "articles": []
    },
    {
      "title": "阮一峰的网络日志",
      "feedUrl": "https://www.ruanyifeng.com/blog/atom.xml",
      "siteUrl": "http://www.ruanyifeng.com/blog/",
      "articles": [
        {
          "id": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html",
          "author": null,
          "description": "这里记录每周值得分享的科技内容，周五发布。（[通知] 下周欢度春节，周刊暂停，2月11日恢复。）...",
          "link": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html",
          "publishedOn": "2022-01-21T00:48:38.000Z",
          "wordCount": 320,
          "title": "科技爱好者周刊（第 193 期）：前端与后端，谁更难？"
        },
        {
          "id": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html",
          "author": null,
          "description": "这里记录每周值得分享的科技内容，周五发布。...",
          "link": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html",
          "publishedOn": "2022-01-14T00:39:50.000Z",
          "wordCount": 407,
          "title": "科技爱好者周刊（第 192 期）：最大的机会来自新技术"
        }
      ]
    },
    {
      "title": "MacTalk-池建强的随想录",
      "feedUrl": "https://macshuo.com/?feed=rss2",
      "siteUrl": "https://macshuo.com",
      "articles": []
    },
    {
      "title": "Tinyfool的个人网站",
      "feedUrl": "http://feeds.feedburner.com/Tinyfoolblog",
      "siteUrl": "https://codechina.org",
      "articles": []
    },
    {
      "title": "ChangeLog of KDr2.com",
      "feedUrl": "https://kdr2.com/misc/site-log.xml",
      "siteUrl": "http://kdr2.com/misc/",
      "articles": []
    },
    {
      "title": "卡瓦邦噶！",
      "feedUrl": "https://www.kawabangga.com/feed",
      "siteUrl": "https://www.kawabangga.com",
      "articles": [
        {
          "id": "https://www.kawabangga.com/?p=4828",
          "author": "laixintao",
          "description": "我发现屏幕上会动的东西都会吸引注意力，现在每天又收到很多消息，只要一个小时不看肯定会上百条。这样的工作状态很糟 […]\nContinue reading...\nThe post 沉浸式工作 first appeared on 卡瓦邦噶！.",
          "link": "https://www.kawabangga.com/posts/4828",
          "publishedOn": "2022-08-31T15:30:54.000Z",
          "wordCount": 644,
          "title": "沉浸式工作",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Manjusaka",
      "feedUrl": "https://manjusaka.itscoder.com/atom.xml",
      "siteUrl": "https://manjusaka.blog/atom.xml",
      "articles": []
    },
    {
      "title": "laike9m's blog",
      "feedUrl": "https://laike9m.com/blog/rss",
      "siteUrl": "https://laike9m.com/blog/rss",
      "articles": []
    },
    {
      "title": "Frost's Blog",
      "feedUrl": "https://frostming.com/feed.xml",
      "siteUrl": "https://frostming.com",
      "articles": []
    },
    {
      "title": "Posts on Jiayuan Thoughts",
      "feedUrl": "http://blog.jiayuanzhang.com/post/index.xml",
      "siteUrl": "https://blog.jiayuanzhang.com/post/",
      "articles": []
    },
    {
      "title": "codedump的网络日志",
      "feedUrl": "https://www.codedump.info/index.xml",
      "siteUrl": "https://www.codedump.info/",
      "articles": [
        {
          "id": "https://www.codedump.info/post/20220904-weekly-24/",
          "author": null,
          "description": "引言：本文梳理sqlite并发读写方案的演进之路。 sqlite并发读写的演进之路 概论 sqlite底层的存储基于B-tree，B-Tree对底层存储的基",
          "link": "https://www.codedump.info/post/20220904-weekly-24/",
          "publishedOn": "2022-09-04T01:10:31.000Z",
          "wordCount": 453,
          "title": "周刊（第24期）：sqlite并发读写的演进之路",
          "imageUrl": "https://www.codedump.info/images/dog.png"
        }
      ]
    },
    {
      "title": "李辉",
      "feedUrl": "https://greyli.com/feed",
      "siteUrl": "https://greyli.com",
      "articles": [
        {
          "id": "https://greyli.com/?p=4582",
          "author": "李辉",
          "description": "在做核酸的地方发现一只很可爱的电箱，感觉它会和皮克斯台灯成为朋友，所以我给它取名「皮克斯电箱」。",
          "link": "https://greyli.com/box-jr/",
          "publishedOn": "2022-09-06T10:23:16.000Z",
          "wordCount": 213,
          "title": "皮克斯电箱",
          "imageUrl": "https://greyli.com/wp-content/uploads/2020/07/avatar.jpg"
        },
        {
          "id": "https://greyli.com/?p=4517",
          "author": "李辉",
          "description": "2017 年我从扬州大学对面的大专毕业，在家待业五年后，终于没有钱再支撑下去。于是去年十一月开始正式找工作，十 […]",
          "link": "https://greyli.com/job-hunting/",
          "publishedOn": "2022-08-27T04:59:16.000Z",
          "wordCount": 826,
          "title": "待业五年后的找工作经历",
          "imageUrl": "https://greyli.com/wp-content/uploads/2020/07/avatar.jpg"
        }
      ]
    },
    {
      "title": "�Ʒ�� BLOG",
      "feedUrl": "https://blog.codingnow.com/atom.xml",
      "siteUrl": "https://blog.codingnow.com/",
      "articles": [
        {
          "id": "https://blog.codingnow.com/2022/09/routemap.html",
          "author": null,
          "description": "����������������Ϸ�У���ͨ�������ǻ��ڹ�·���ġ���·����ʵ����·��Ϊ���㣬·Ϊ�߹��ɵģ�����ͼ����Ϊ�����д����ĳ�����ʻ�����·���У����ԣ�����Ҫһ���ռ��Ч�ķ���������Щ������·���� �ڴ󲿷�����£����ǵĳ�����ѡ��Ψһ�����·����Ҳ����˵����� A ·�ڵ� B ·�ڴ���һ���ƶ��õ�·���Ļ������еĳ�����������·��������һ�㣬���ǿ��ԶԶ���·���ϲ����档 ��ѡ���õ�ǰ·�� id ��Ŀ�ĵ�·�� id �� key ������һվ·�� id ��Ϊ value ��������һ�� hash ���С����������� dijkstra �㷨�����㵽�յ�����·�ߺ��ٰ�ÿһ��·���øýṹ�����������ɡ� ����������ĳ��·�ڣ�ֻ��Ҫ�õ�ǰ·�ں����Լ���Ŀ�ĵؾͿ���������Ӧ�����ĸ����򿪡�����ṹ���ʺϱ����� Lua table �У���Ԫ��������δ�������·������������һ��·����ֻ��һ�� cache ����ʱ���������ؽ���...",
          "link": "https://blog.codingnow.com/2022/09/routemap.html",
          "publishedOn": "2022-09-02T03:11:05.000Z",
          "wordCount": 122,
          "title": "·����·���Ĵ���",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "piglei",
      "feedUrl": "https://www.zlovezl.cn/feeds/latest",
      "siteUrl": "http://www.zlovezl.cn/",
      "articles": [
        {
          "id": "https://www.zlovezl.cn/articles/how-to-design-config-file-for-software/",
          "author": null,
          "description": "在设计和开发服务端（后端）软件时，配置文件是一个绕不开的话题。\n配置文件是一种用于存放各类可配置项的特殊文件。每个软件都会预设一些默认配置，但这些默认值不可能适用于所有情况。因此，到了不同的环境中，我们常常需要用配置文件对其进行扩展和修改。\n拿版本控制软件 git 举例。大部分用户的 home 目录（~）都存放着一份 .gitconfig 配置文件，里面写着自己的用户名和邮箱地址：\n[user]\n    name = piglei\n    email = piglei2007@gmail.com\n\n就像软件的任何一个主要功能一样，配置文件也会极大的影响软件的使用体验。良好的设计能让软件变得更易用，糟糕的设计则会带来许多意想不到的问题，将用户拒之门外。\n在这篇文章中，我整理了 4 条关于“软件配置文件”的设计建议，希望能对你有所帮助。\n1. 最好不给配置也能用\n在网络世界里，每过一天，人们的耐心似乎就又比前一天减少了一丁点。一个制作精良的短视频，如果 3 秒钟之内无法抓住你，你的右手拇指就会条件反射般将它划走。\n现在，假设你开发了一个非常有用的工具软件，并发布到了网上。软件的功能非常全面，所有人在使用它之前，需要编辑一份包含 20 项配置的配置文件。你猜，有多大比例的潜在用户会直接掉头走掉？\n当我们想要一件东西时，总是一刻也不想等。因此，初始的配置过程麻烦与否，会强烈影响人们尝试软件的决心。在这方面，我认为最好的体验是：无需提供任何配置，便能直接使用软件 80% 以上的功能。\n假如无法做到这一点，我们也应该试着从以下几个方面着手，尽量降低用户的配置成本，压缩从“开始安装”到“可使用”之间的等待时间。\n1.1 预设合理的默认值\n为了将必须由用户提供的配置项，压缩到最少。你得给软件的所有配置项预设一个足够合理的默认值。这些默认值应当能让尽可能多的用户满意。\n举个例子，假如你的软件…",
          "link": "https://www.zlovezl.cn/articles/how-to-design-config-file-for-software/",
          "publishedOn": "2022-09-03T00:58:33.605Z",
          "wordCount": 303,
          "title": "设计服务端软件配置的 4 条建议",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/on-tech-writing-original/",
          "author": null,
          "description": "2019 年的春节假期，我闲在家中，准备一次性刷完攒了大半年的“Python Weekly” 周报。在 6 月份的一封周报里，有一篇名为 “Python Idioms: Multiline Strings” 的文章，内容很精炼。前半部分先描述痛点：在 Python 中写多行字符串字面量，随后演示如何用 textwrap.dedent 函数来优化它。\n部分内容摘录如下：\n... The problem is that it’s just ugly, because indenting the strings actually inserts the indentation into the string. So you have to do this:\ndef create_snippet():\n    code_snippet = \"\"\"\\\nint main(int argc, char* argv[]) {\n    return 0;\n}\"\"\"\n\nWith dedent, we can indent the whole multiline string according to the current scope, so that it looks like a Pythonic code block...\n巧合的是，我两个月前刚在博客上发布了“Python 工匠”的第 3 篇文章：“使用数字与字符串的技巧”。在这篇文章中，同样出现了 textwrap.dedent  函数。\n我写的内容：\n日常编码时，还有一种比较麻烦的情况。就是需要在已经有缩进层级的代码里，插入多行字符串字面量。因为多行字符串不能包含当前的缩进空格，所以，我们需要把代码写成这样：\ndef main():\n    if user.is_active:\n        message = \"\"\"Welcom…",
          "link": "https://www.zlovezl.cn/articles/on-tech-writing-original/",
          "publishedOn": "2022-09-02T01:01:54.728Z",
          "wordCount": 277,
          "title": "技术写作二三事：原创情结",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/embrace-the-grind-cn-translation/",
          "author": null,
          "description": "原文：\"Embrace the Grind\" by Jacob\n原文链接：https://jacobian.org/2021/apr/7/embrace-the-grind/\n我以前见过一种纸牌魔术，至今仍念念不忘。那魔术简单来说是这样的（为了清楚起见，我在这做了进一步的简化）：找一位志愿者，让他挑选一张扑克牌放进信封并封好。然后魔术师会邀请志愿者挑选茶叶。茶叶共有好几十箱，全被塑料膜密封了起来。志愿者选定一个箱子后，撕掉包装膜，从里面挑一个同样密封着的装着茶包的袋子。而当他撕开袋子时……他选的那张牌就在里面。\n⚠️ 如果你不想知道魔术背后的秘密，马上停止阅读。\n这魔术的秘密平淡无奇，却令我兴奋不已。首先，志愿者选牌的过程运用了迫牌技巧（force）  （译注：指魔术师运用特殊手法，让选择看似随机，但最终指向同一个结果）。但从那几打箱子里选一个，则是实打实的自由选择，从箱子里挑茶包也是一样。这一步没有任何花招：魔术师不会碰到志愿者选的箱子或茶包。那张扑克牌是确确实实的躺在被密封的茶叶袋里。\n技巧全在准备工作里。在表演这个魔术前，魔术师会购买好几十箱茶叶并全部打开，拆开里面的每一袋茶叶。然后，再往每个袋子里放入一张梅花 ♣️3 并重新封上，再放回箱子里。这个过程要重复好几百遍，准备工作一共得花上许多个小时——甚至许多天。\n这魔术里唯一的“诡计”，在于它所需要的准备工作实在太无聊，太令人乏味了，以至于我们观看到表演效果时，根本想象不到会有人会为了这个简单的效果，完成那么无聊的工作。\n魔术师 Teller 写过一篇文章 “seven secrets of magic”，专门讲了这个事情。\n如果某个魔术所需的时间、金钱或练习的次数，比你（或任何一个普通人）所愿意付出的更多，那你就会被骗到。我和我的搭档 Penn，曾经从脱口秀主持人大卫莱特曼的桌子上的一顶绅士帽里，变出过 500 只活蟑螂。准备这个魔术得花上许多周。我们聘请了一位昆虫学家，他给了我们一批行动迟缓、不怕摄影镜头的蟑螂（你家橱柜下的那种在特写镜头下可待不住），还教会我们如何抓起这些虫子（不至于像小姑娘们那样尖叫）。然后我们用泡沫塑料（蟑螂无法附着的少数几种材料之一）做了一个小隔间，并想了个狡猾的办法把隔间偷偷放进了那个帽子里。为这戏法搞得这么麻烦是不是不值？对你来说，也许是，但对魔术师们来说不是。\n经常有一些做技术的新人问我成功的秘诀。其实没多少秘诀，真的，但这个秘诀——愿意做一些乏味透顶的事情，以至于看起来像魔术一样——在信息技术行业一样适用。\n我们身处一个痴迷于自动化、精简和效率的行业。Larry Wall （译注：Perl 编程语言的作者）写的“程序员的美德”，是一段有关我们的工程师文化的奠基性文字，它里面这么描述“懒惰（Laziness）”：\n懒惰：这种品质让你费尽心思降低整体能量消耗。它驱使你写出别人觉得有用的省力程序。也驱使你为你的东西编写文档，那样你就不用回答太多有关它的问题。\n我并非不同意：让程序搞定重复性的工作，是懂得编程后能做的最棒的事情之一。但是，有时候问题是没法被自动化解决的。而如果你愿意拥抱这种苦差事，那你看起来就会像一位魔术师一样。\n举个例子，我以前加入过一个团队，团队负责维护一个被太多缺陷（bug）淹没了的系统。那时，一共有大约 2000 条处于开放状态的缺陷报告，它们没有标签，没有分类，也没有排任何优先级。对于应该处理哪些问题，团队成员根本无法达成共识。他们基本上被困于随机处理 bug 的过程中——而根本弄不清楚那个 bug 是否重要……新来的缺陷报告也无法被有效分流，因为查找重复报告几乎没法做。所以，开放状态的单据总数越来越高，整个团队好几个月都停滞不前。我的任务是解决这个问题：让团队恢复运作，降低开放状态的单据数量，并找到最终将其降低为零的办法。\n于是，我用了和魔术师一样的技巧，也就是没有任何技巧：我就是把活干了。我把所有的缺陷报告打印了出来——一个议题一页纸。我把每张纸都读了一遍，找了个大房间开始叠放在地板上。我在便签纸写上标签，然后把它贴在纸堆上。我把那些纸在不同纸堆间移来移去，把议题编号写在白板上，变成长长一列；我把自己想象成了电影《会计刺客》里的主角本·阿弗莱克。我在那个房间了待了约三个星期，出来的时候，每个缺陷报告都被重新审阅、打了标签、分了类，以及定好了优先级。\n做完这件事情后，形势马上发生了逆转：我们能够立即关闭好几百张重复了的单据，新议题只需几分钟就可以完成分流，而不是一天。我记得缺陷议题的总数降到 0 花了大约一年时间，但整个过程相当顺利。大家都说，我完成了不可能完成的任务，但那么说并不对：我仅仅只是做了一些过于乏味，其他人根本不愿意做的事。\n有时，编程就像魔法一样：你念出一些神秘的咒语，一队机器人就会听命于你。但也有时候，魔法其实平凡而乏味。如果你愿意拥抱苦差事，你就可以完成不可能完成的任务。",
          "link": "https://www.zlovezl.cn/articles/embrace-the-grind-cn-translation/",
          "publishedOn": "2022-09-02T01:01:54.675Z",
          "wordCount": 170,
          "title": "译：拥抱苦差事",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/my-book-releases/",
          "author": null,
          "description": "我写了一本 Python 语言的编程进阶书：《Python工匠：案例、技巧与工程实践》，本文是关于这本书背后的故事与一些致谢。\n\n我一直觉得编程某种意义上是一门“手艺”，因为优雅而高效的代码，就如同完美的工艺品一样让人赏心悦目。就像一位用锤子敲敲打打了十几年的铁匠，总结出一套“如何锻造出锋利的刀”的经验之谈——我在代码世界也“敲敲打打”了十几年，沉淀下来的便是这本《Python工匠》。\n我将自己这些年掌握的技巧、经验与编程建议，去粗取精后悉数写入书中，希望它能帮读者朋友们完成从初学者到工匠的跃迁。\n书目前已经正式上市，欢迎点击购买。\n本文主要内容来自书中的“前言”部分，略有删改。\n结缘 Python\n我初次接触 Python 是在 2008 年末。那时临近大学毕业，我凭着在学校里学到的一丁点儿 Java 知识四处求职。我从大学所在的城市南昌出发去了北京，借宿在一位朋友的出租屋里，他当时在巨鲸音乐网上班，用的主要编程语言正是 Python。\n得知我正在寻找一份 Java 相关的工作，那位朋友跟我说：“写 Java 代码有啥意思啊？Python 比 Java 好玩多了，而且功能还特别强大，连 Google 都在用 !”\n在他的热情“传道”下，我对 Python 语言产生了好奇心，于是找了一份当时最流行的开源教程 Dive into Python，开始学起 Python 来。\n实话实说，之前在学校用 Java 和 C 语言编程时，我很少体会到编程的快乐，也从未期待过自己将来要以写代码为生。但神奇的是，在学了一些 Python 的基础知识，并用它写了几个小玩意儿以后，我突然意识到原来自己很喜欢编程，并开始期待找到一份以 Python 为主要编程语言的开发工作——也许这就是我和 Python 之间的缘分吧！\n幸运的是，在当时的 CPyUG（中国 Python 用户组）邮件组里，正好有…",
          "link": "https://www.zlovezl.cn/articles/my-book-releases/",
          "publishedOn": "2022-09-02T01:01:54.519Z",
          "wordCount": 275,
          "title": "用 Python 编程 13 年后，我把经验写成了 400 页的书",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/pre-sale-of-the-python-craftsman/",
          "author": null,
          "description": "引子\n2008 年末，北京奥运会刚刚结束后不久。我——一名计算机专业的大四学生，因为一位朋友的极力推荐，开始试着把 Python 作为自己的第一编程语言。大学毕业后，我顺利成为了一名 Python 程序员，先后在搜狐和赶集网工作过，后来加入了深圳腾讯，目前担任蓝鲸工具 PaaS 平台的负责人。\n在这十几年的职业生涯里，我参与过许多项目的后端开发与架构设计工作。虽然每个项目的复杂程度、活跃用户量各不相同，但它们大都使用 Python 语言编写。\n在我看来，Python 是一门“易于上手，难于精通”的编程语言——虽然许多人都能用 Python 编写出可运行的程序，但只有少数人，掌握了写出高质量 Python 代码的诀窍。\n而在现实世界中，代码质量常常会决定项目的成败。我见过许多被寄予厚望的大项目，前期光彩夺目，后期却躺在烂代码堆上逐渐腐败，缓慢走向死亡。我也参与过许多老项目，亲手偿还过代码质量方面的“技术债”，助它们重获生机。\n“Python 工匠”的由来\n慢慢地，我积累的 Python 编程经验越来越多，于是有了一份想把它们分享出去的冲动。后来，实在压抑不住那份冲动，便试着把这些经验落笔成了文章，日积月累，开源的技术文章系列：“Python 工匠” 就此诞生。\n2020 年中，我开始思考如何把“Python 工匠”系列文章，升级成一本以“Python 进阶”为主题的编程书。虽然在当时的市面上，Python 进阶图书可谓汗牛充栋，又有《流畅的 Python》、《Effective Python》等珠玉在前，似乎没有再多一本“中文 Python 进阶书”的必要。\n但也许因为自己是湖南人，骨子里有股“蛮”劲吧——总觉得自己写的东西独一份，能给读者一些不一样的体验。下定决心后，开始闭门写作，一年后终于成稿，之后便看着书稿在传统出版流程中缓慢流动。\n今天，我很高兴地告诉大家，图书《Python 工匠：案例、技巧与工程实践》已经走完了出版前的所有准备工作，马上就要上市了。你在京东上就可预订本书，现在下单还可享受 8 折优惠。\n预订《Python 工匠》：京东购买链接\n图书简介\n《Python 工匠：案例、技巧与工程实践》是一本编程进阶图书，旨在帮你掌握如何用 Python 写出结构清晰、易于维护的好代码。但与传统进阶书不同，它不是一本大而全的“语言高级特性参考手册”，而更像是一份“答卷”，一份我针对问题 “如何写好 Python 代码？” 交出的答卷。\n答卷中的所有知识点，大体可分为两大部分：\n第一部分：语言无关的通用知识，比如变量的命名原则、写注释时的注意事项、写条件分支语句的技巧，等等。这部分知识放之四海而皆准，可以运用在各种编程语言上，不光是 Python。\n第二部分：与 Python 语言强相关的知识，比如自定义容器类型来改善代码、在恰当的时机抛出异常、活用生成器改善循环、用装饰器设计地道的 API，等等。\n在表达形式方面，就像副标题“案例、技巧与工程实践”所说，全书的知识点会通过好几种不同的形式展现。你会读到一些深入语言核心的概念释疑，也会读到一些贴近工程实践的编程建议，在某些章节，你甚至还会发现一些像电子游戏一样有趣的案例故事。希望它们能为你带来些许不一样的感受。\n当然，要了解一本书，看再多介绍文字，都不如读一段书中的内容来得真切。你可以访问《Python 工匠》的图灵社区主页，在“随书下载”部分找到《Python 工匠》的样章 PDF 文件。不妨先读读看。\n“这本书适合我吗？”\n在我看来，《Python 工匠》最适合以下人群阅读：\n以 Python 为主要开发语言的工程师\n工作中需要写一些 Python 代码的工程师\n有其他语言编程经验、想学习如何写出高效 Python 代码的工程师\n任何爱好编程、喜欢 Python 语言的读者\n全书内容以进阶知识为主，里面虽有少量基础知识讲解，但并不全面，描述得也并不详尽。正因如此，假如你从未有过任何编程经验，我并不建议你通过本书来入门 Python。\n在 Python 入门学习方面，我推荐由人民邮电出版社图灵公司出版的《Python 编程：从入门到实践》。当你对 Python 有了一些了解、打好基础后，再回过头来阅读本书，相信彼时你可以获得更好的阅读体验。\n好了，关于《Python 工匠》的预售信息先介绍到这。感谢所有朋友一路以来对“Python 工匠”的支持，期待你拿到书后，第一时间与我分享你的阅读体验。再会！",
          "link": "https://www.zlovezl.cn/articles/pre-sale-of-the-python-craftsman/",
          "publishedOn": "2022-09-02T01:01:54.512Z",
          "wordCount": 215,
          "title": "久等了，我的新书《Python工匠》开始预售",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "静觅",
      "feedUrl": "https://cuiqingcai.com/atom.xml",
      "siteUrl": "/atom.xml",
      "articles": []
    },
    {
      "title": "咸糖 - 自律者自由",
      "feedUrl": "https://vim0.com/index.xml",
      "siteUrl": "https://vim0.com/",
      "articles": []
    },
    {
      "title": "离别歌",
      "feedUrl": "https://www.leavesongs.com/feed",
      "siteUrl": "https://www.leavesongs.com",
      "articles": [
        {
          "id": "https://www.leavesongs.com/PENETRATION/xss-from-my-blog.html",
          "author": "phithon",
          "description": "今天晚上收到几个提醒，打开一看是有人在我博客评论区测试XSS：\n\n本来这种测试司空见惯了，而且此人也没成功找到XSS，放以前我多半就关掉页面了。\n不过我今晚不知为何临时起意，就顺势看了一下自己写的代码，居然被我自己找到一个XSS漏洞：\n\n原因是什么呢？\n0x01 开发历史介绍\n我当时在开发这个回复按钮的时候，为了方便，直接用JavaScript伪协议来调用reply_to函数，比如：\n\nreply",
          "link": "https://www.leavesongs.com/PENETRATION/xss-from-my-blog.html",
          "publishedOn": "2022-09-07T01:09:00.106Z",
          "wordCount": 361,
          "title": "我自己博客的一个XSS的故事",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/PENETRATION/flarum-rce-tour.html",
          "author": "phithon",
          "description": "本文首发于跳跳糖，转载请联系站方。\n一次日常测试中，偶然遇到了一个Flarum搭建的论坛，并获得了其管理员账号。本来到这里已经可以算完成了任务，将漏洞报给具体负责的人就结束了，但是既然已经拿到了管理员账号，何不尝试一下RCE呢？\n首先，我在管理员后台看到当前Fla",
          "link": "https://www.leavesongs.com/PENETRATION/flarum-rce-tour.html",
          "publishedOn": "2022-09-05T01:13:32.364Z",
          "wordCount": 536,
          "title": "从偶遇Flarum开始的RCE之旅",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/xray-3-years.html",
          "author": "phithon",
          "description": "上周XRay做了一次三周年活动，简单写了一段寄语，记录于博客。\n大家好，我是phith0n，安全社区有很多人叫我P师傅，以前很抗拒这个称呼，总是给人一种互相吹捧的感觉，不过后来我换了一个角度理解这个称呼——以前坐公交车不认路的时候，我们上车时总会问司机：师傅，这个车到不到国贸大厦？\n这么多年过去了，大部分人用上智能手机，搜索引擎，很少再有人会再问出这类问题。但是我还是愿意当一个普普通通的司机师傅",
          "link": "https://www.leavesongs.com/THINK/xray-3-years.html",
          "publishedOn": "2022-09-04T01:00:46.437Z",
          "wordCount": 120,
          "title": "XRay三周年活动寄语",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/from-China-to-Singapore-2.html",
          "author": "phithon",
          "description": "这篇文章是出中国记的下半部分。\n继续插播广告：我们团队（Shopee Security Team）正在大力招聘，相关介绍和岗位JD见这里：https://www.leavesongs.com/PENETRATION/singapore-shopee-security-team-recruitment.html\n离我抵达新加坡已经接近两个月了，想一想两个月前的今天我仍然在北京的家里，这一段时间仿",
          "link": "https://www.leavesongs.com/THINK/from-China-to-Singapore-2.html",
          "publishedOn": "2022-09-02T01:01:54.969Z",
          "wordCount": 733,
          "title": "出中国记（下）",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/my-github-account-used-to-be-suspended.html",
          "author": "phithon",
          "description": "最近好像又有人 GitHub 被封，每隔一段时间就有。分享下我自己的经历吧，好几年以前了，也许还是有点参考价值。\n账号被封，查找原因\n那是 2017 年 12 月，有天早上起来突然发现自己的号phith0n登不上去了，具体的表现是：\n账号登录不上，登录以后明确告诉我我好被封了\nGitHub 个人页面访问显示 404\n我自己名下所有项目，访问都是 404\n但是我创建的 Group 还是好的，没有受",
          "link": "https://www.leavesongs.com/THINK/my-github-account-used-to-be-suspended.html",
          "publishedOn": "2022-09-02T01:01:54.637Z",
          "wordCount": 305,
          "title": "分享下我 GitHub 被封的经历",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html",
          "author": "phithon",
          "description": "本文发表于跳跳糖，转载请联系对方。\n这周三在『代码审计知识星球』中发了一段代码，用户可以控制环境变量，但后面没有太多可控的地方，最后找到了一处执行命令，不过命令用户也不可控。用PHP来演示一下就是下面这7行：\n<?php\nforeach($_REQUEST['envs'] as $key => $val) {\n    putenv(\"{$key}={$va",
          "link": "https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html",
          "publishedOn": "2022-09-02T01:01:54.546Z",
          "wordCount": 1091,
          "title": "我是如何利用环境变量注入执行任意命令",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/how-to-verify-individual-in-singapore.html",
          "author": "phithon",
          "description": "三月是国内个税申报的月份，也是新加坡个税申报的月份，前几天收到一封信，告诉我应该填写个税申报的表格了。\n\n在这封信里，提到了下面这段话：\nTo file your Income Tax Return, log in to myTax Portal with Singpass.\n这里面有说到一个东西叫Singpass，在我来新加坡的这几个月里，几乎可以把Singpass看成新加坡政府数字化建设的",
          "link": "https://www.leavesongs.com/THINK/how-to-verify-individual-in-singapore.html",
          "publishedOn": "2022-09-02T01:01:54.412Z",
          "wordCount": 148,
          "title": "新加坡企业是怎么做实名认证的？",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/why-subscribe-a-newspaper-in-2022.html",
          "author": "phithon",
          "description": "前两天我在收拾屋子。\n我家是个很典型的单人公寓，由于女朋友还没到新加坡来，现在的屋子一个人住恰到好处。不过一个人住总是一个熵增的过程，所以我会隔段时间收拾一下屋子，把一些不想要又舍不得丢的东西塞进我家里的一个“黑洞”里，这样外面看起来仍然是整齐的。\n这个“黑洞”是一个正经防空洞——新加坡大部分民宅都配有一个防空洞，面积大概一两个平米，所以大部分人会选择将这个房间作为杂物间。\n我就是在走进这个杂物间",
          "link": "https://www.leavesongs.com/THINK/why-subscribe-a-newspaper-in-2022.html",
          "publishedOn": "2022-09-02T01:01:54.334Z",
          "wordCount": 154,
          "title": "2022年我为什么订报纸",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/vulhub-10k-stars-moment.html",
          "author": "phithon",
          "description": "不知不觉离我所主导的开源项目Vulhub的第一个提交已经快5年了，Vulhub俨然已经成为我生活中的日常。就像我生活中的另外几个日常代码审计星球、Sec-News一样，他们并不是我刻意要去完成的一项工作，而成为了我现实中的“回调函数”。\n用回调函数来形容这件事听起来很独特，但仔细想想确实如此——我会在分析最新漏洞后将其做成Vulhub环境提交到Github，我会在读到不错文章后点击浏览器上的按钮将",
          "link": "https://www.leavesongs.com/THINK/vulhub-10k-stars-moment.html",
          "publishedOn": "2022-09-02T01:01:54.133Z",
          "wordCount": 145,
          "title": "Vulhub万赞纪念与抽奖",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/um560-two-weeks-using-experience.html",
          "author": "phithon",
          "description": "本文推荐的UM560非与厂商合作推广，仅为我自己的使用体验。\n我大四买了人生里第一台Macbook pro，从那会开始Mac卡顿的问题就一直困扰我到现在。当然这也可能是我自己的问题——我没钱买顶配Macbook，以前公司发的也是低配Macbook pro，我甚至用8G内存的13寸Mac直到2018年才换。\n来新公司以后总算摸到了15寸Mac，但还是16G内存Intel芯片的老电脑，被Burps",
          "link": "https://www.leavesongs.com/THINK/um560-two-weeks-using-experience.html",
          "publishedOn": "2022-08-27T00:56:43.279Z",
          "wordCount": 281,
          "title": "使用Minisforum UM560小主机办公一周体验",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "张戈博客",
      "feedUrl": "https://zhangge.net/feed",
      "siteUrl": "https://zhang.ge",
      "articles": []
    },
    {
      "title": "Reimu's blog",
      "feedUrl": "https://blog.k8s.li/atom.xml",
      "siteUrl": "/atom.xml",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}