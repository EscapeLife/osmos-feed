<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.escapelife.site/osmos-feed/index.html</id>
    <title>escapelife::feed</title>
    <updated>2022-12-08T00:47:20.439Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://www.escapelife.site/osmos-feed/index.html"/>
    <link rel="self" href="https://www.escapelife.site/osmos-feed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[分享下我 GitHub 被封的经历]]></title>
        <id>https://www.leavesongs.com/THINK/my-github-account-used-to-be-suspended.html</id>
        <link href="https://www.leavesongs.com/THINK/my-github-account-used-to-be-suspended.html"/>
        <updated>2022-12-08T00:47:16.743Z</updated>
        <summary type="html"><![CDATA[最近好像又有人 GitHub 被封，每隔一段时间就有。分享下我自己的经历吧，好几年以前了，也许还是有点参考价值。
账号被封，查找原因
那是 2017 年 12 月，有天早上起来突然发现自己的号phith0n登不上去了，具体的表现是：
账号登录不上，登录以后明确告诉我我好被封了
GitHub 个人页面访问显示 404
我自己名下所有项目，访问都是 404
但是我创建的 Group 还是好的，没有受]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[新加坡企业是怎么做实名认证的？]]></title>
        <id>https://www.leavesongs.com/THINK/how-to-verify-individual-in-singapore.html</id>
        <link href="https://www.leavesongs.com/THINK/how-to-verify-individual-in-singapore.html"/>
        <updated>2022-12-08T00:47:16.717Z</updated>
        <summary type="html"><![CDATA[三月是国内个税申报的月份，也是新加坡个税申报的月份，前几天收到一封信，告诉我应该填写个税申报的表格了。

在这封信里，提到了下面这段话：
To file your Income Tax Return, log in to myTax Portal with Singpass.
这里面有说到一个东西叫Singpass，在我来新加坡的这几个月里，几乎可以把Singpass看成新加坡政府数字化建设的]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022年我为什么订报纸]]></title>
        <id>https://www.leavesongs.com/THINK/why-subscribe-a-newspaper-in-2022.html</id>
        <link href="https://www.leavesongs.com/THINK/why-subscribe-a-newspaper-in-2022.html"/>
        <updated>2022-12-08T00:47:16.540Z</updated>
        <summary type="html"><![CDATA[前两天我在收拾屋子。
我家是个很典型的单人公寓，由于女朋友还没到新加坡来，现在的屋子一个人住恰到好处。不过一个人住总是一个熵增的过程，所以我会隔段时间收拾一下屋子，把一些不想要又舍不得丢的东西塞进我家里的一个“黑洞”里，这样外面看起来仍然是整齐的。
这个“黑洞”是一个正经防空洞——新加坡大部分民宅都配有一个防空洞，面积大概一两个平米，所以大部分人会选择将这个房间作为杂物间。
我就是在走进这个杂物间]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vulhub万赞纪念与抽奖]]></title>
        <id>https://www.leavesongs.com/THINK/vulhub-10k-stars-moment.html</id>
        <link href="https://www.leavesongs.com/THINK/vulhub-10k-stars-moment.html"/>
        <updated>2022-12-08T00:47:16.336Z</updated>
        <summary type="html"><![CDATA[不知不觉离我所主导的开源项目Vulhub的第一个提交已经快5年了，Vulhub俨然已经成为我生活中的日常。就像我生活中的另外几个日常代码审计星球、Sec-News一样，他们并不是我刻意要去完成的一项工作，而成为了我现实中的“回调函数”。
用回调函数来形容这件事听起来很独特，但仔细想想确实如此——我会在分析最新漏洞后将其做成Vulhub环境提交到Github，我会在读到不错文章后点击浏览器上的按钮将]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[用 Python 编程 13 年后，我把经验写成了 400 页的书]]></title>
        <id>https://www.zlovezl.cn/articles/my-book-releases/</id>
        <link href="https://www.zlovezl.cn/articles/my-book-releases/"/>
        <updated>2022-12-08T00:47:15.651Z</updated>
        <summary type="html"><![CDATA[我写了一本 Python 语言的编程进阶书：《Python工匠：案例、技巧与工程实践》，本文是关于这本书背后的故事与一些致谢。

我一直觉得编程某种意义上是一门“手艺”，因为优雅而高效的代码，就如同完美的工艺品一样让人赏心悦目。就像一位用锤子敲敲打打了十几年的铁匠，总结出一套“如何锻造出锋利的刀”的经验之谈——我在代码世界也“敲敲打打”了十几年，沉淀下来的便是这本《Python工匠》。
我将自己这些年掌握的技巧、经验与编程建议，去粗取精后悉数写入书中，希望它能帮读者朋友们完成从初学者到工匠的跃迁。
书目前已经正式上市，欢迎点击购买。
本文主要内容来自书中的“前言”部分，略有删改。
结缘 Python
我初次接触 Python 是在 2008 年末。那时临近大学毕业，我凭着在学校里学到的一丁点儿 Java 知识四处求职。我从大学所在的城市南昌出发去了北京，借宿在一位朋友的出租屋里，他当时在巨鲸音乐网上班，用的主要编程语言正是 Python。
得知我正在寻找一份 Java 相关的工作，那位朋友跟我说：“写 Java 代码有啥意思啊？Python 比 Java 好玩多了，而且功能还特别强大，连 Google 都在用 !”
在他的热情“传道”下，我对 Python 语言产生了好奇心，于是找了一份当时最流行的开源教程 Dive into Python，开始学起 Python 来。
实话实说，之前在学校用 Java 和 C 语言编程时，我很少体会到编程的快乐，也从未期待过自己将来要以写代码为生。但神奇的是，在学了一些 Python 的基础知识，并用它写了几个小玩意儿以后，我突然意识到原来自己很喜欢编程，并开始期待找到一份以 Python 为主要编程语言的开发工作——也许这就是我和 Python 之间的缘分吧！
幸运的是，在当时的 CPyUG（中国 Python 用户组）邮件组里，正好有…]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022年欧洲游记]]></title>
        <id>https://www.leavesongs.com/THINK/europe-trip-2022.html</id>
        <link href="https://www.leavesongs.com/THINK/europe-trip-2022.html"/>
        <updated>2022-12-04T00:49:18.869Z</updated>
        <summary type="html"><![CDATA[这篇文章记录了我和三个小伙伴在法国、瑞士旅行的经历。
我大概是在今年7月做了去欧洲旅行的计划，说是“计划”也不太贴切，只是几个朋友搜了一下比较合适的机票以后，就决定要来了。类似的“计划”之前也发生过，有时候甚至是买好机票才喊人，不得不说我的很多决定是草率的，但这就是我。
准备
签证
由于这次旅行是放在新加坡公共假期“屠妖节”的那一个礼拜（10月底），所以我就在8月份去申请了签证。
我们的第一目的地]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PaaS服务从Heroku迁移到fly.io小计]]></title>
        <id>https://www.leavesongs.com/SOFT/paas-service-from-heroku-to-fly-io.html</id>
        <link href="https://www.leavesongs.com/SOFT/paas-service-from-heroku-to-fly-io.html"/>
        <updated>2022-12-03T00:45:52.818Z</updated>
        <summary type="html"><![CDATA[今年8月得知了Heroku将要在今年11月彻底下线免费服务，我只有少量服务放在Heroku上，所以没有太在意，直到10月感觉到不得不开始做迁移相关的工作了，于是开始着手准备，并有了这篇文章。
这篇文章纯属是事后记录的一些流水账，可能缺少截图和代码片段，全当是作为一个故事看，可能不具备参考性。
为什么选择PaaS服务
从很久以前开始接触“虚拟主机”这个行业开始，我经历了虚拟主机、VPS、云主机、Pa]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Minisforum UM560小主机办公一周体验]]></title>
        <id>https://www.leavesongs.com/THINK/um560-two-weeks-using-experience.html</id>
        <link href="https://www.leavesongs.com/THINK/um560-two-weeks-using-experience.html"/>
        <updated>2022-12-01T00:58:04.434Z</updated>
        <summary type="html"><![CDATA[本文推荐的UM560非与厂商合作推广，仅为我自己的使用体验。
我大四买了人生里第一台Macbook pro，从那会开始Mac卡顿的问题就一直困扰我到现在。当然这也可能是我自己的问题——我没钱买顶配Macbook，以前公司发的也是低配Macbook pro，我甚至用8G内存的13寸Mac直到2018年才换。
来新公司以后总算摸到了15寸Mac，但还是16G内存Intel芯片的老电脑，被Burps]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go 的几种函数传参模式]]></title>
        <id>https://www.zlovezl.cn/articles/go-func-argument-patterns/</id>
        <link href="https://www.zlovezl.cn/articles/go-func-argument-patterns/"/>
        <updated>2022-12-01T00:58:03.968Z</updated>
        <summary type="html"><![CDATA[1. 普通传参
Go 语言支持按顺序传入参数来调用函数，下面是一个示例函数：
// ListApplications 查询应用列表
func ListApplications(limit, offset int) []Application {
    return allApps[offset : offset+limit]
}

调用代码：
ListApplications(5, 0)

当你想增加新参数时，可以直接修改函数签名。比如，下面的代码给 ListApplications 增加了新的过滤参数 owner：
func ListApplications(limit, offset int, owner string) []Application {
    if owner != "" {
        // ...
    }
    return allApps[offset : offset+limit]
}

调用代码也需要随之改变：
ListApplications(5, 0, "piglei")
// 不使用 owner 过滤
ListApplications(5, 0, "")

显而易见，这种普通传参模式存在以下几个明显的问题：
可读性不佳：只支持用位置，不支持用关键字来区分参数，参数变多后，各参数含义很难一目了然
破坏兼容性：增加新参数后，原有调用代码必须进行对应修改，比如像上方的 ListApplications(5, 0, "") 一样，在 owner 参数的位置传递空字符串
为了解决这些问题，常见的做法是引入一个参数结构体（struct）类型。
2. 使用参数结构体
新建一个结构体类型，里面包含函数需要支持的所有参数：
// ListAppsOptions 是查询应用列表时的可选项
type ListAppsOptions struct …]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[好]]></title>
        <id>https://greyli.com/?p=4670</id>
        <link href="https://greyli.com/good/"/>
        <updated>2022-11-28T14:24:34.000Z</updated>
        <summary type="html"><![CDATA[[…]]]></summary>
        <author>
            <name>李辉</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PromCon 2022  演讲：Alerting with Confidence]]></title>
        <id>https://www.kawabangga.com/?p=4860</id>
        <link href="https://www.kawabangga.com/posts/4860"/>
        <updated>2022-11-27T04:17:56.000Z</updated>
        <summary type="html"><![CDATA[我从 2018 年就在做和监控告警相关的工作，到现在已经有差不多5年了。之前几年集中在报警的自动化处理上，后来 […]
Continue reading...
The post PromCon 2022  演讲：Alerting with Confidence first appeared on 卡瓦邦噶！.

相关文章:

演讲
没来的请举手
Prometheus alert rules 拆分成多个查询表达式
《Prometheus Up & Running》阅读
分享一下“稍后阅读”的 random 功能]]></summary>
        <author>
            <name>laixintao</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[我自己博客的一个XSS的故事]]></title>
        <id>https://www.leavesongs.com/PENETRATION/xss-from-my-blog.html</id>
        <link href="https://www.leavesongs.com/PENETRATION/xss-from-my-blog.html"/>
        <updated>2022-11-26T00:47:58.396Z</updated>
        <summary type="html"><![CDATA[今天晚上收到几个提醒，打开一看是有人在我博客评论区测试XSS：

本来这种测试司空见惯了，而且此人也没成功找到XSS，放以前我多半就关掉页面了。
不过我今晚不知为何临时起意，就顺势看了一下自己写的代码，居然被我自己找到一个XSS漏洞：

原因是什么呢？
0x01 开发历史介绍
我当时在开发这个回复按钮的时候，为了方便，直接用JavaScript伪协议来调用reply_to函数，比如：

reply]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[如果编程就是写作]]></title>
        <id>https://www.zlovezl.cn/articles/if-programming-is-writing/</id>
        <link href="https://www.zlovezl.cn/articles/if-programming-is-writing/"/>
        <updated>2022-11-26T00:47:53.031Z</updated>
        <summary type="html"><![CDATA[很多人会把编程比作写作，比如《Thinking in Java》的作者 Bruce Eckel 就说：“程序员就是作家。”二者的确也有许多相似之处，好文章和好代码，都离不精确的结构与优美的表达。写作时，每个人都能用词语拼出句子，组成文章，但并非所有人都能写出好文章，编程也是一样。
不过严格来说，编程和写作虽有少许相似，却仍是两个迥异的技能，在很多方面差别很大。比如我们很少会重写一篇已发表的文章，但重构一段能正常运行的代码实属家常便饭。
不过这一次，我们不妨把编程中那些复杂概念抛掷一旁，来一次奇思妙想：“如果编程就是写作，我们能从中学到些什么？”
1. 使用人称代词
写文章时，我们常常会使用人称代词来指代人物的名字，以此减少冗余，提升文本的流畅度。这个技巧当然也可以用到编程中。
以下代码重复使用了一个冗长的表达式：
def run_server():
    if check(data.servier_config.host):
        start_server(data.servier_config.host)
    else:
        logger.error('Server %s is invalid.', data.servier_config.host)

定义一个临时变量，作为代词使用来简化代码：
def run_server():
    host = data.servier_config.host
    if check(host):
        start_server(host)
    else:
        logger.error('Server %s is invalid.', host)

2. 搭配使用长短句
写作时， 如何选择句子的长短是一门学问。汪曾祺说过：“语言的奥秘，说穿了不过是长句与短句的搭配。”长句信息…]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 工匠：语句、表达式和海象操作符]]></title>
        <id>https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/</id>
        <link href="https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/"/>
        <updated>2022-11-25T00:52:52.326Z</updated>
        <summary type="html"><![CDATA[让我们从两行最简单的 Python 代码开始。
>>> name = 'piglei'
>>> print(f'Hello {name}!')
Hello piglei!

这是一个“Hello World”程序，你也许已经见过它无数次，对里面的每个字母都了如指掌。但你可能从未意识到，上面两行代码，刚好对应着 Python 语言里的两个重要概念：语句（statement） 和 表达式（expression）。
具体来说，name = 'piglei' 是一行赋值语句，它将字符串 'piglei' 赋给了 name 变量。print(f'Hello {name}!') 则是一个表达式，它通过调用内置函数 print 往屏幕打印信息。
表达式的特点
编写代码时，语句和表达式是两类最基本的代码单元。
虽然在日常表达中，我们会把语句和表达式区分开来，但二者并非完全不同——表达式实际上就是一种特殊的语句。和普通语句比起来，表达式的特别之处在于它拥有一个（或多个）返回值。
举例来说，前面的 print(...) 表达式就会返回一个值：None。你可以像下面这样获取它：
# print 函数总是返回 None
>>> val = print(f'Hello {name}!')
Hello piglei!
>>> val is None
True

虽然这么做没啥实际用途，但它足够体现出表达式的独特之处——因为你永远无法对普通语句做出类似的事情。无论是“赋值语句”、“循环语句”，还是一个“条件分支语句”，你永远都无法将其赋值给某个变量，这在语法上无从谈起：
>>> val = (name = 'piglei')
  File "<stdin>", line 1
    val = (name = 'piglei')
                ^
SyntaxError: invali…]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[从偶遇Flarum开始的RCE之旅]]></title>
        <id>https://www.leavesongs.com/PENETRATION/flarum-rce-tour.html</id>
        <link href="https://www.leavesongs.com/PENETRATION/flarum-rce-tour.html"/>
        <updated>2022-11-24T00:57:05.614Z</updated>
        <summary type="html"><![CDATA[本文首发于跳跳糖，转载请联系站方。
一次日常测试中，偶然遇到了一个Flarum搭建的论坛，并获得了其管理员账号。本来到这里已经可以算完成了任务，将漏洞报给具体负责的人就结束了，但是既然已经拿到了管理员账号，何不尝试一下RCE呢？
首先，我在管理员后台看到当前Fla]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 193 期）：前端与后端，谁更难？]]></title>
        <id>http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html</id>
        <link href="http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html"/>
        <updated>2022-01-21T00:48:38.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。（[通知] 下周欢度春节，周刊暂停，2月11日恢复。）...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 192 期）：最大的机会来自新技术]]></title>
        <id>http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html</id>
        <link href="http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html"/>
        <updated>2022-01-14T00:39:50.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
</feed>