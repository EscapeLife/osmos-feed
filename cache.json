{
  "sources": [
    {
      "title": "Escape",
      "feedUrl": "https://www.escapelife.site/atom.xml",
      "siteUrl": "https://www.escapelife.site/atom.xml",
      "articles": [
        {
          "id": "https://www.escapelife.site/posts/c4b42099.html",
          "author": null,
          "description": "<blockquote>\n<p><strong>每个人都在努力的生活，每一种生活都值得被看见和记录！</strong></p>\n</blockquote>\n<p>多彩的生活，需要我自己去选择，到底什么才是适合我，我不知道。但是我会努力去尝试，直到我找到它并抓住它。</p>\n<p>",
          "link": "https://www.escapelife.site/posts/c4b42099.html",
          "publishedOn": "2022-05-14T16:36:23.000Z",
          "wordCount": 104,
          "title": "如何幸福的生活",
          "imageUrl": null
        },
        {
          "id": "https://www.escapelife.site/posts/754ba85c.html",
          "author": null,
          "description": "<blockquote>\n<p><strong>深入理解官方文档，轻松学会使用 K3S 工具！</strong></p>\n</blockquote>\n<p><code>K3s</code> 是一个轻量级的 <code>Kubernetes</code>",
          "link": "https://www.escapelife.site/posts/754ba85c.html",
          "publishedOn": "2022-05-10T12:00:00.000Z",
          "wordCount": 4006,
          "title": "K3S工具进阶完全指南",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "酷 壳 – CoolShell",
      "feedUrl": "https://coolshell.cn/feed",
      "siteUrl": "https://coolshell.cn",
      "articles": []
    },
    {
      "title": "阮一峰的网络日志",
      "feedUrl": "https://www.ruanyifeng.com/blog/atom.xml",
      "siteUrl": "http://www.ruanyifeng.com/blog/",
      "articles": [
        {
          "id": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html",
          "author": null,
          "description": "这里记录每周值得分享的科技内容，周五发布。（[通知] 下周欢度春节，周刊暂停，2月11日恢复。）...",
          "link": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html",
          "publishedOn": "2022-01-21T00:48:38.000Z",
          "wordCount": 320,
          "title": "科技爱好者周刊（第 193 期）：前端与后端，谁更难？"
        },
        {
          "id": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html",
          "author": null,
          "description": "这里记录每周值得分享的科技内容，周五发布。...",
          "link": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html",
          "publishedOn": "2022-01-14T00:39:50.000Z",
          "wordCount": 407,
          "title": "科技爱好者周刊（第 192 期）：最大的机会来自新技术"
        }
      ]
    },
    {
      "title": "MacTalk-池建强的随想录",
      "feedUrl": "https://macshuo.com/?feed=rss2",
      "siteUrl": "https://macshuo.com",
      "articles": [
        {
          "id": "https://macshuo.com/?p=1752",
          "author": "MacTalk",
          "description": "有用户在认识到自己是普通人之后，挺苦恼，怎么努力，也是中上水准，问我咋办。 在回 … Continue reading →",
          "link": "https://macshuo.com/?p=1752",
          "publishedOn": "2022-05-20T07:46:33.000Z",
          "wordCount": 204,
          "title": "老想着成功干嘛？就好像我们的智力不足以应付不追求成功的生活似的",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Tinyfool的个人网站",
      "feedUrl": "http://feeds.feedburner.com/Tinyfoolblog",
      "siteUrl": "https://codechina.org",
      "articles": []
    },
    {
      "title": "ChangeLog of KDr2.com",
      "feedUrl": "https://kdr2.com/misc/site-log.xml",
      "siteUrl": "http://kdr2.com/misc/",
      "articles": []
    },
    {
      "title": "卡瓦邦噶！",
      "feedUrl": "https://www.kawabangga.com/feed",
      "siteUrl": "https://www.kawabangga.com",
      "articles": [
        {
          "id": "https://www.kawabangga.com/?p=4676",
          "author": "laixintao",
          "description": "最近做了一个好玩的工具，叫 xbin.io 。其中有一项工作是为不同的工具来构建 Docker 镜像，让他们都 […]\nContinue reading...\nThe post Docker 镜像构建的一些技巧 first appeared on 卡瓦邦噶！.\n\n相关文章:\n\nSRE&Devops 每周分享 Issue #5\nBuild 一个最小的 Redis Docker Image\n健康茁壮成长的Python项目需要什么？\nShell单引号、双引号和反引号的区别\nDjango 项目使用 CircleCI",
          "link": "https://www.kawabangga.com/posts/4676",
          "publishedOn": "2022-05-08T07:37:24.000Z",
          "wordCount": 1014,
          "title": "Docker 镜像构建的一些技巧",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Manjusaka",
      "feedUrl": "https://manjusaka.itscoder.com/atom.xml",
      "siteUrl": "http://manjusaka.itscoder.com/atom.xml",
      "articles": []
    },
    {
      "title": "laike9m's blog",
      "feedUrl": "https://laike9m.com/blog/rss",
      "siteUrl": "https://laike9m.com/blog/rss",
      "articles": []
    },
    {
      "title": "Frost's Blog",
      "feedUrl": "https://frostming.com/feed.xml",
      "siteUrl": "https://frostming.com",
      "articles": []
    },
    {
      "title": "Posts on Jiayuan Thoughts",
      "feedUrl": "http://blog.jiayuanzhang.com/post/index.xml",
      "siteUrl": "http://blog.jiayuanzhang.com/post/",
      "articles": []
    },
    {
      "title": "codedump的网络日志",
      "feedUrl": "https://www.codedump.info/index.xml",
      "siteUrl": "https://www.codedump.info/",
      "articles": [
        {
          "id": "https://www.codedump.info/post/20220514-weekly-15/",
          "author": null,
          "description": "引言：ARIES(Algorithm for Recovery and Isolation Exploiting Semantics的简称）是论文《ARIES: A Transaction Recovery Method Supporting Fine-Franularity Locking and Partial Rollbacks Using Write-Ahead Logging》中提到的一种存储引擎中数据恢复的算法。这篇论文可以说是存储引擎数据恢复领域必读的一篇论文，这两期的周刊就是对这篇论文的图解，这是其中的上篇。\n图解ARIES论文（上）\n在展开解释ARIES算法原理之前，需要对Page oriented类存储引擎的日志系统有一定的了解，才能继续解释基于这个日志系统之上做的恢复算法。\n问题\n在一个存储系统中，出错是非常常见的情况的，这就涉及到出错了之后系统恢复时还需要能继续工作，即数据不能发生破坏导致整个系统跑不起来。\n于是，当系统出错需要重启恢复时，就涉及到以下两个动作：\n撤销（Undo）：未完成或者由于各种原因发生的事务，其修改需要被撤销，即回滚为事务之前的旧值。\n重做（Redo）：已经提交的事务，其修改操作的效果需要体现为新值。\n来看下图中提出的问题：\n\n在上图中：\n存在事务T1和T2在同时执行：\n\n事务T1：修改A值为3，但是在事务还未提交前，事务T2开始执行。\n事务T2：修改B值为8，并且成功提交。\n事务T1终止：在事务T2成功提交之后，事务T1终止。\n这个事务调度的执行顺序引发了以下几个问题：\n回滚未提交的事务T1需要做什么？\n对于未提交的事务T1，是否允许其修改操作在持久化存储上生效（即将A修改为3）？\n在磁盘的数据库文件中，已成功提交的事务T2，其修改操作是否应该立即落盘（即从buffer pool中同步修改的内容到硬盘）。\n第一个问题当前暂且放…",
          "link": "https://www.codedump.info/post/20220514-weekly-15/",
          "publishedOn": "2022-05-13T22:33:26.000Z",
          "wordCount": 424,
          "title": "周刊（第15期）：图解ARIES论文（上）",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "李辉",
      "feedUrl": "https://greyli.com/feed",
      "siteUrl": "https://greyli.com",
      "articles": [
        {
          "id": "https://greyli.com/?p=4350",
          "author": "李辉",
          "description": "APIFlask 是一个基于 Flask 和 marshmallow 实现的 API 框架（详细介绍见这篇文章 […]",
          "link": "https://greyli.com/apiflask1/",
          "publishedOn": "2022-05-21T13:51:56.000Z",
          "wordCount": 101,
          "title": "APIFlask 1.0 版本发布",
          "imageUrl": "https://greyli.com/wp-content/uploads/2020/07/avatar.jpg"
        }
      ]
    },
    {
      "title": "�Ʒ�� BLOG",
      "feedUrl": "https://blog.codingnow.com/atom.xml",
      "siteUrl": "https://blog.codingnow.com/",
      "articles": [
        {
          "id": "https://blog.codingnow.com/2022/05/roguelike_lua.html",
          "author": null,
          "description": "�Һ�ϲ�� RogueLike ��Ϸ������˵���������ϵ��� Rogue ��������Ϸ ����������Ϸ�У����������Ҫ�Ĳ��֣�ֻҪ�������������Ϸ��Ҫ�Ľ�������͹��ˡ� �Ҷ����ַ�ƴ�ճ�������Ϸ���������ر�İ��ã�Сʱ��������Ϸ���Ǵ� text mode ��ʼ�ġ� �ڽ��죬���ֻ������֤һ��ĳ����Ϸ��ԭ�ͣ�һ�� Rogue �磬text mode �Ľ������棬���ܻ�����ʡ�µġ���Ϊ�㲻�ؿ����ȥ׼�������زģ�������Щ�ز���κʹ���Эͬ�������ƶ����ӵĹ�������Ϊ��Ϸ����һ����Ȥ�� ascii art ��������̫����ʱ�䣬���ܻ���д��������е�һ����Ȥ�ĵ����� ǰ��ʱ��������Ŀ��һ��������ģ��ʱ���ҳ�������һ���򵥵� Lua �� �������� text mode ����������������һ�������ӵ�����������һ�£����� SDL2 ��һ��������һ��� RogueLike �������һ�����ݡ�...",
          "link": "https://blog.codingnow.com/2022/05/roguelike_lua.html",
          "publishedOn": "2022-05-19T06:05:39.000Z",
          "wordCount": 159,
          "title": "RogueLike ԭ�Ϳ�������",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "piglei",
      "feedUrl": "https://www.zlovezl.cn/feeds/latest",
      "siteUrl": "http://www.zlovezl.cn/",
      "articles": [
        {
          "id": "https://www.zlovezl.cn/articles/how-to-design-config-file-for-software/",
          "author": null,
          "description": "在设计和开发服务端（后端）软件时，配置文件是一个绕不开的话题。\n配置文件是一种用于存放各类可配置项的特殊文件。每个软件都会预设一些默认配置，但这些默认值不可能适用于所有情况。因此，到了不同的环境中，我们常常需要用配置文件对其进行扩展和修改。\n拿版本控制软件 git 举例。大部分用户的 home 目录（~）都存放着一份 .gitconfig 配置文件，里面写着自己的用户名和邮箱地址：\n[user]\n    name = piglei\n    email = piglei2007@gmail.com\n\n就像软件的任何一个主要功能一样，配置文件也会极大的影响软件的使用体验。良好的设计能让软件变得更易用，糟糕的设计则会带来许多意想不到的问题，将用户拒之门外。\n在这篇文章中，我整理了 4 条关于“软件配置文件”的设计建议，希望能对你有所帮助。\n1. 最好不给配置也能用\n在网络世界里，每过一天，人们的耐心似乎就又比前一天减少了一丁点。一个制作精良的短视频，如果 3 秒钟之内无法抓住你，你的右手拇指就会条件反射般将它划走。\n现在，假设你开发了一个非常有用的工具软件，并发布到了网上。软件的功能非常全面，所有人在使用它之前，需要编辑一份包含 20 项配置的配置文件。你猜，有多大比例的潜在用户会直接掉头走掉？\n当我们想要一件东西时，总是一刻也不想等。因此，初始的配置过程麻烦与否，会强烈影响人们尝试软件的决心。在这方面，我认为最好的体验是：无需提供任何配置，便能直接使用软件 80% 以上的功能。\n假如无法做到这一点，我们也应该试着从以下几个方面着手，尽量降低用户的配置成本，压缩从“开始安装”到“可使用”之间的等待时间。\n1.1 预设合理的默认值\n为了将必须由用户提供的配置项，压缩到最少。你得给软件的所有配置项预设一个足够合理的默认值。这些默认值应当能让尽可能多的用户满意。\n举个例子，假如你的软件…",
          "link": "https://www.zlovezl.cn/articles/how-to-design-config-file-for-software/",
          "publishedOn": "2022-05-14T01:07:49.962Z",
          "wordCount": 212,
          "title": "设计服务端软件配置的 4 条建议",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/bye-breadtrip/",
          "author": null,
          "description": "2012 年初，北漂的我抱着满心憧憬加入了一家创业公司，和另一位同事一起成了公司唯二的两名后端程序员。这家公司当时的产品是个名叫“遨游记”的移动 App，后来它变成了现在的 面包旅行。\n在面包旅行的几年，我遇到了许多优秀又有趣的同事，写了一打又一打的代码，把一头黑发写的花白（不夸张，后来又黑回来了）。我和许多同事一起，见证了“面包旅行 Appstore 首发”、“安卓版首发”、“苹果年度推荐”等诸多高光时刻，亲身体会到了做为一名程序员最大的幸福——看到自己的代码服务了百万级的用户，为无数人的旅途带来了些许不同的体验。\n后来因为家庭原因，我选择在两年半以后离开了面包旅行。虽然我之后的工作和在线旅游行业再无半点关系，但在三里屯 SOHO 工作的那三十个月，永远是我职业生涯里最为有趣的一段经历之一。\n此时此刻，我猜在面包旅行的服务器上，应该仍然运行着我曾写过的一些代码——“POI 与航班查询”、“游记推荐管理平台”、“用户积分系统”，等等。但我想等到半年以后，等到面包旅行真正关站的那一刻，我曾写过的哪些函数和类便会迎来真正的死亡，同无数其他代码一起消失在互联网的滚滚长河之中。\n有些事情，你明知它迟早会来，但等它真的发生以后，你还是难免会感到突然，觉得难过。对我来说，面包旅行不止是一个游记 App，在它上面，凝聚着太多我和许多同事曾有过的灵感、快乐与骄傲。\n看到关站公告，心中纵有万般不舍，其实也清楚，这个小小的游记 App 能在残酷的移动互联网时代存活下来，一直运营到今日已实属不易。\n最后，让我用自己的方式和面包旅行再道个别。\nfrom __future__ import print_function\n\nprint(\"Hello, breadtrip!\")\nprint(\"Bye, breadtrip!\")",
          "link": "https://www.zlovezl.cn/articles/bye-breadtrip/",
          "publishedOn": "2022-05-13T01:01:11.130Z",
          "wordCount": 60,
          "title": "再见，面包旅行！",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/embrace-the-grind-cn-translation/",
          "author": null,
          "description": "原文：\"Embrace the Grind\" by Jacob\n原文链接：https://jacobian.org/2021/apr/7/embrace-the-grind/\n我以前见过一种纸牌魔术，至今仍念念不忘。那魔术简单来说是这样的（为了清楚起见，我在这做了进一步的简化）：找一位志愿者，让他挑选一张扑克牌放进信封并封好。然后魔术师会邀请志愿者挑选茶叶。茶叶共有好几十箱，全被塑料膜密封了起来。志愿者选定一个箱子后，撕掉包装膜，从里面挑一个同样密封着的装着茶包的袋子。而当他撕开袋子时……他选的那张牌就在里面。\n⚠️ 如果你不想知道魔术背后的秘密，马上停止阅读。\n这魔术的秘密平淡无奇，却令我兴奋不已。首先，志愿者选牌的过程运用了迫牌技巧（force）  （译注：指魔术师运用特殊手法，让选择看似随机，但最终指向同一个结果）。但从那几打箱子里选一个，则是实打实的自由选择，从箱子里挑茶包也是一样。这一步没有任何花招：魔术师不会碰到志愿者选的箱子或茶包。那张扑克牌是确确实实的躺在被密封的茶叶袋里。\n技巧全在准备工作里。在表演这个魔术前，魔术师会购买好几十箱茶叶并全部打开，拆开里面的每一袋茶叶。然后，再往每个袋子里放入一张梅花 ♣️3 并重新封上，再放回箱子里。这个过程要重复好几百遍，准备工作一共得花上许多个小时——甚至许多天。\n这魔术里唯一的“诡计”，在于它所需要的准备工作实在太无聊，太令人乏味了，以至于我们观看到表演效果时，根本想象不到会有人会为了这个简单的效果，完成那么无聊的工作。\n魔术师 Teller 写过一篇文章 “seven secrets of magic”，专门讲了这个事情。\n如果某个魔术所需的时间、金钱或练习的次数，比你（或任何一个普通人）所愿意付出的更多，那你就会被骗到。我和我的搭档 Penn，曾经从脱口秀主持人大卫莱特曼的桌子上的一顶绅士帽里，变出过 500 只活蟑螂。准备这个魔术得花上许多周。我们聘请了一位昆虫学家，他给了我们一批行动迟缓、不怕摄影镜头的蟑螂（你家橱柜下的那种在特写镜头下可待不住），还教会我们如何抓起这些虫子（不至于像小姑娘们那样尖叫）。然后我们用泡沫塑料（蟑螂无法附着的少数几种材料之一）做了一个小隔间，并想了个狡猾的办法把隔间偷偷放进了那个帽子里。为这戏法搞得这么麻烦是不是不值？对你来说，也许是，但对魔术师们来说不是。\n经常有一些做技术的新人问我成功的秘诀。其实没多少秘诀，真的，但这个秘诀——愿意做一些乏味透顶的事情，以至于看起来像魔术一样——在信息技术行业一样适用。\n我们身处一个痴迷于自动化、精简和效率的行业。Larry Wall （译注：Perl 编程语言的作者）写的“程序员的美德”，是一段有关我们的工程师文化的奠基性文字，它里面这么描述“懒惰（Laziness）”：\n懒惰：这种品质让你费尽心思降低整体能量消耗。它驱使你写出别人觉得有用的省力程序。也驱使你为你的东西编写文档，那样你就不用回答太多有关它的问题。\n我并非不同意：让程序搞定重复性的工作，是懂得编程后能做的最棒的事情之一。但是，有时候问题是没法被自动化解决的。而如果你愿意拥抱这种苦差事，那你看起来就会像一位魔术师一样。\n举个例子，我以前加入过一个团队，团队负责维护一个被太多缺陷（bug）淹没了的系统。那时，一共有大约 2000 条处于开放状态的缺陷报告，它们没有标签，没有分类，也没有排任何优先级。对于应该处理哪些问题，团队成员根本无法达成共识。他们基本上被困于随机处理 bug 的过程中——而根本弄不清楚那个 bug 是否重要……新来的缺陷报告也无法被有效分流，因为查找重复报告几乎没法做。所以，开放状态的单据总数越来越高，整个团队好几个月都停滞不前。我的任务是解决这个问题：让团队恢复运作，降低开放状态的单据数量，并找到最终将其降低为零的办法。\n于是，我用了和魔术师一样的技巧，也就是没有任何技巧：我就是把活干了。我把所有的缺陷报告打印了出来——一个议题一页纸。我把每张纸都读了一遍，找了个大房间开始叠放在地板上。我在便签纸写上标签，然后把它贴在纸堆上。我把那些纸在不同纸堆间移来移去，把议题编号写在白板上，变成长长一列；我把自己想象成了电影《会计刺客》里的主角本·阿弗莱克。我在那个房间了待了约三个星期，出来的时候，每个缺陷报告都被重新审阅、打了标签、分了类，以及定好了优先级。\n做完这件事情后，形势马上发生了逆转：我们能够立即关闭好几百张重复了的单据，新议题只需几分钟就可以完成分流，而不是一天。我记得缺陷议题的总数降到 0 花了大约一年时间，但整个过程相当顺利。大家都说，我完成了不可能完成的任务，但那么说并不对：我仅仅只是做了一些过于乏味，其他人根本不愿意做的事。\n有时，编程就像魔法一样：你念出一些神秘的咒语，一队机器人就会听命于你。但也有时候，魔法其实平凡而乏味。如果你愿意拥抱苦差事，你就可以完成不可能完成的任务。",
          "link": "https://www.zlovezl.cn/articles/embrace-the-grind-cn-translation/",
          "publishedOn": "2022-05-13T01:01:11.037Z",
          "wordCount": 79,
          "title": "译：拥抱苦差事",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/on-tech-writing-original/",
          "author": null,
          "description": "2019 年的春节假期，我闲在家中，准备一次性刷完攒了大半年的“Python Weekly” 周报。在 6 月份的一封周报里，有一篇名为 “Python Idioms: Multiline Strings” 的文章，内容很精炼。前半部分先描述痛点：在 Python 中写多行字符串字面量，随后演示如何用 textwrap.dedent 函数来优化它。\n部分内容摘录如下：\n... The problem is that it’s just ugly, because indenting the strings actually inserts the indentation into the string. So you have to do this:\ndef create_snippet():\n    code_snippet = \"\"\"\\\nint main(int argc, char* argv[]) {\n    return 0;\n}\"\"\"\n\nWith dedent, we can indent the whole multiline string according to the current scope, so that it looks like a Pythonic code block...\n巧合的是，我两个月前刚在博客上发布了“Python 工匠”的第 3 篇文章：“使用数字与字符串的技巧”。在这篇文章中，同样出现了 textwrap.dedent  函数。\n我写的内容：\n日常编码时，还有一种比较麻烦的情况。就是需要在已经有缩进层级的代码里，插入多行字符串字面量。因为多行字符串不能包含当前的缩进空格，所以，我们需要把代码写成这样：\ndef main():\n    if user.is_active:\n        message = \"\"\"Welcom…",
          "link": "https://www.zlovezl.cn/articles/on-tech-writing-original/",
          "publishedOn": "2022-05-13T01:01:10.993Z",
          "wordCount": 186,
          "title": "技术写作二三事：原创情结",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/pre-sale-of-the-python-craftsman/",
          "author": null,
          "description": "引子\n2008 年末，北京奥运会刚刚结束后不久。我——一名计算机专业的大四学生，因为一位朋友的极力推荐，开始试着把 Python 作为自己的第一编程语言。大学毕业后，我顺利成为了一名 Python 程序员，先后在搜狐和赶集网工作过，后来加入了深圳腾讯，目前担任蓝鲸工具 PaaS 平台的负责人。\n在这十几年的职业生涯里，我参与过许多项目的后端开发与架构设计工作。虽然每个项目的复杂程度、活跃用户量各不相同，但它们大都使用 Python 语言编写。\n在我看来，Python 是一门“易于上手，难于精通”的编程语言——虽然许多人都能用 Python 编写出可运行的程序，但只有少数人，掌握了写出高质量 Python 代码的诀窍。\n而在现实世界中，代码质量常常会决定项目的成败。我见过许多被寄予厚望的大项目，前期光彩夺目，后期却躺在烂代码堆上逐渐腐败，缓慢走向死亡。我也参与过许多老项目，亲手偿还过代码质量方面的“技术债”，助它们重获生机。\n“Python 工匠”的由来\n慢慢地，我积累的 Python 编程经验越来越多，于是有了一份想把它们分享出去的冲动。后来，实在压抑不住那份冲动，便试着把这些经验落笔成了文章，日积月累，开源的技术文章系列：“Python 工匠” 就此诞生。\n2020 年中，我开始思考如何把“Python 工匠”系列文章，升级成一本以“Python 进阶”为主题的编程书。虽然在当时的市面上，Python 进阶图书可谓汗牛充栋，又有《流畅的 Python》、《Effective Python》等珠玉在前，似乎没有再多一本“中文 Python 进阶书”的必要。\n但也许因为自己是湖南人，骨子里有股“蛮”劲吧——总觉得自己写的东西独一份，能给读者一些不一样的体验。下定决心后，开始闭门写作，一年后终于成稿，之后便看着书稿在传统出版流程中缓慢流动。\n今天，我很高兴地告诉大家，图书《Python 工匠：案例、技巧与工程实践》已经走完了出版前的所有准备工作，马上就要上市了。你在京东上就可预订本书，现在下单还可享受 8 折优惠。\n预订《Python 工匠》：京东购买链接\n图书简介\n《Python 工匠：案例、技巧与工程实践》是一本编程进阶图书，旨在帮你掌握如何用 Python 写出结构清晰、易于维护的好代码。但与传统进阶书不同，它不是一本大而全的“语言高级特性参考手册”，而更像是一份“答卷”，一份我针对问题 “如何写好 Python 代码？” 交出的答卷。\n答卷中的所有知识点，大体可分为两大部分：\n第一部分：语言无关的通用知识，比如变量的命名原则、写注释时的注意事项、写条件分支语句的技巧，等等。这部分知识放之四海而皆准，可以运用在各种编程语言上，不光是 Python。\n第二部分：与 Python 语言强相关的知识，比如自定义容器类型来改善代码、在恰当的时机抛出异常、活用生成器改善循环、用装饰器设计地道的 API，等等。\n在表达形式方面，就像副标题“案例、技巧与工程实践”所说，全书的知识点会通过好几种不同的形式展现。你会读到一些深入语言核心的概念释疑，也会读到一些贴近工程实践的编程建议，在某些章节，你甚至还会发现一些像电子游戏一样有趣的案例故事。希望它们能为你带来些许不一样的感受。\n当然，要了解一本书，看再多介绍文字，都不如读一段书中的内容来得真切。你可以访问《Python 工匠》的图灵社区主页，在“随书下载”部分找到《Python 工匠》的样章 PDF 文件。不妨先读读看。\n“这本书适合我吗？”\n在我看来，《Python 工匠》最适合以下人群阅读：\n以 Python 为主要开发语言的工程师\n工作中需要写一些 Python 代码的工程师\n有其他语言编程经验、想学习如何写出高效 Python 代码的工程师\n任何爱好编程、喜欢 Python 语言的读者\n全书内容以进阶知识为主，里面虽有少量基础知识讲解，但并不全面，描述得也并不详尽。正因如此，假如你从未有过任何编程经验，我并不建议你通过本书来入门 Python。\n在 Python 入门学习方面，我推荐由人民邮电出版社图灵公司出版的《Python 编程：从入门到实践》。当你对 Python 有了一些了解、打好基础后，再回过头来阅读本书，相信彼时你可以获得更好的阅读体验。\n好了，关于《Python 工匠》的预售信息先介绍到这。感谢所有朋友一路以来对“Python 工匠”的支持，期待你拿到书后，第一时间与我分享你的阅读体验。再会！",
          "link": "https://www.zlovezl.cn/articles/pre-sale-of-the-python-craftsman/",
          "publishedOn": "2022-05-13T01:01:10.957Z",
          "wordCount": 124,
          "title": "久等了，我的新书《Python工匠》开始预售",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/my-book-releases/",
          "author": null,
          "description": "我写了一本 Python 语言的编程进阶书：《Python工匠：案例、技巧与工程实践》，本文是关于这本书背后的故事与一些致谢。\n\n我一直觉得编程某种意义上是一门“手艺”，因为优雅而高效的代码，就如同完美的工艺品一样让人赏心悦目。就像一位用锤子敲敲打打了十几年的铁匠，总结出一套“如何锻造出锋利的刀”的经验之谈——我在代码世界也“敲敲打打”了十几年，沉淀下来的便是这本《Python工匠》。\n我将自己这些年掌握的技巧、经验与编程建议，去粗取精后悉数写入书中，希望它能帮读者朋友们完成从初学者到工匠的跃迁。\n书目前已经正式上市，欢迎点击购买。\n本文主要内容来自书中的“前言”部分，略有删改。\n结缘 Python\n我初次接触 Python 是在 2008 年末。那时临近大学毕业，我凭着在学校里学到的一丁点儿 Java 知识四处求职。我从大学所在的城市南昌出发去了北京，借宿在一位朋友的出租屋里，他当时在巨鲸音乐网上班，用的主要编程语言正是 Python。\n得知我正在寻找一份 Java 相关的工作，那位朋友跟我说：“写 Java 代码有啥意思啊？Python 比 Java 好玩多了，而且功能还特别强大，连 Google 都在用 !”\n在他的热情“传道”下，我对 Python 语言产生了好奇心，于是找了一份当时最流行的开源教程 Dive into Python，开始学起 Python 来。\n实话实说，之前在学校用 Java 和 C 语言编程时，我很少体会到编程的快乐，也从未期待过自己将来要以写代码为生。但神奇的是，在学了一些 Python 的基础知识，并用它写了几个小玩意儿以后，我突然意识到原来自己很喜欢编程，并开始期待找到一份以 Python 为主要编程语言的开发工作——也许这就是我和 Python 之间的缘分吧！\n幸运的是，在当时的 CPyUG（中国 Python 用户组）邮件组里，正好有…",
          "link": "https://www.zlovezl.cn/articles/my-book-releases/",
          "publishedOn": "2022-05-13T01:01:10.910Z",
          "wordCount": 184,
          "title": "用 Python 编程 13 年后，我把经验写成了 400 页的书",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "静觅",
      "feedUrl": "https://cuiqingcai.com/atom.xml",
      "siteUrl": "/atom.xml",
      "articles": []
    },
    {
      "title": "咸糖 - 自律者自由",
      "feedUrl": "https://vim0.com/index.xml",
      "siteUrl": "https://vim0.com/",
      "articles": []
    },
    {
      "title": "离别歌",
      "feedUrl": "https://www.leavesongs.com/feed",
      "siteUrl": "https://www.leavesongs.com",
      "articles": [
        {
          "id": "https://www.leavesongs.com/THINK/from-China-to-Singapore-2.html",
          "author": "phithon",
          "description": "这篇文章是出中国记的下半部分。\n继续插播广告：我们团队（Shopee Security Team）正在大力招聘，相关介绍和岗位JD见这里：https://www.leavesongs.com/PENETRATION/singapore-shopee-security-team-recruitment.html\n离我抵达新加坡已经接近两个月了，想一想两个月前的今天我仍然在北京的家里，这一段时间仿",
          "link": "https://www.leavesongs.com/THINK/from-China-to-Singapore-2.html",
          "publishedOn": "2022-05-13T01:01:12.295Z",
          "wordCount": 678,
          "title": "出中国记（下）",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/PENETRATION/goahead-en-injection-cve-2021-42342.html",
          "author": "phithon",
          "description": "昨天关注到了GoAhead的环境变量注入漏洞，主要是下面这两篇文章：\nPBCTF 2021 - RCE 0-Day in Goahead Webserver\nCVE-2021-42342 GoAhead 远程命令执行漏洞深入分析与复现\n实际上已经是几个月前的漏洞了，但是因为这段时间漏洞管制比较严格，导致信息闭塞了不少，才进行了复现。\n漏洞原理\nGoAhead曾经出现过一次环境变量注入漏洞，建议",
          "link": "https://www.leavesongs.com/PENETRATION/goahead-en-injection-cve-2021-42342.html",
          "publishedOn": "2022-05-13T01:01:12.200Z",
          "wordCount": 638,
          "title": "GoAhead环境变量注入复现踩坑记",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html",
          "author": "phithon",
          "description": "本文发表于跳跳糖，转载请联系对方。\n这周三在『代码审计知识星球』中发了一段代码，用户可以控制环境变量，但后面没有太多可控的地方，最后找到了一处执行命令，不过命令用户也不可控。用PHP来演示一下就是下面这7行：\n<?php\nforeach($_REQUEST['envs'] as $key => $val) {\n    putenv(\"{$key}={$va",
          "link": "https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html",
          "publishedOn": "2022-05-13T01:01:12.048Z",
          "wordCount": 1005,
          "title": "我是如何利用环境变量注入执行任意命令",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/why-subscribe-a-newspaper-in-2022.html",
          "author": "phithon",
          "description": "前两天我在收拾屋子。\n我家是个很典型的单人公寓，由于女朋友还没到新加坡来，现在的屋子一个人住恰到好处。不过一个人住总是一个熵增的过程，所以我会隔段时间收拾一下屋子，把一些不想要又舍不得丢的东西塞进我家里的一个“黑洞”里，这样外面看起来仍然是整齐的。\n这个“黑洞”是一个正经防空洞——新加坡大部分民宅都配有一个防空洞，面积大概一两个平米，所以大部分人会选择将这个房间作为杂物间。\n我就是在走进这个杂物间",
          "link": "https://www.leavesongs.com/THINK/why-subscribe-a-newspaper-in-2022.html",
          "publishedOn": "2022-05-13T01:01:11.731Z",
          "wordCount": 76,
          "title": "2022年我为什么订报纸",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html",
          "author": "phithon",
          "description": "本文首发在跳跳糖社区。\n2018年『代码审计』星球举办的Code-Breaking Puzzles非常成功，后面我就一直想再做一次类似的活动。Code-Breaking属于极其偏向于trick分享的代码审计谜题，所以要求题目具有一定的独创性，最好是能用10行以内的代码片段，描述一个具有实战价值的场景。\n大概在去年疫情在家办公那段时间，有个同学问过我一个问题，他遇到了一个PHP文件包含漏洞，但找",
          "link": "https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html",
          "publishedOn": "2022-05-13T01:01:11.666Z",
          "wordCount": 775,
          "title": "Docker PHP裸文件本地包含综述",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/open-source-sponsor-budget-for-me.html",
          "author": "phithon",
          "description": "最近爆发的Log4j代码执行漏洞 CVE-2021-44228，不光在安全圈引起了轩然大波，整个互联网行业都有受到波及，但这个漏洞的“始作俑者”是一个仅拥有3个赞助者的开源项目。虽然可能有其他没有统计到的捐助渠道，但最终数字不会超过太多：\n\n我们几乎可以说，世界上99%以上的开源软件开发者实际上是在用爱发电。这也是为什么我们经常在Github上看到废弃掉的开源项目，而且这个比例国内会比国外高很多，",
          "link": "https://www.leavesongs.com/THINK/open-source-sponsor-budget-for-me.html",
          "publishedOn": "2022-05-13T01:01:11.587Z",
          "wordCount": 77,
          "title": "开源项目捐赠预算",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/how-to-verify-individual-in-singapore.html",
          "author": "phithon",
          "description": "三月是国内个税申报的月份，也是新加坡个税申报的月份，前几天收到一封信，告诉我应该填写个税申报的表格了。\n\n在这封信里，提到了下面这段话：\nTo file your Income Tax Return, log in to myTax Portal with Singpass.\n这里面有说到一个东西叫Singpass，在我来新加坡的这几个月里，几乎可以把Singpass看成新加坡政府数字化建设的",
          "link": "https://www.leavesongs.com/THINK/how-to-verify-individual-in-singapore.html",
          "publishedOn": "2022-05-13T01:01:11.340Z",
          "wordCount": 93,
          "title": "新加坡企业是怎么做实名认证的？",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/from-China-to-Singapore-1.html",
          "author": "phithon",
          "description": "插个小广告：我们团队（Shopee Security Team）正在大力招聘，相关介绍和岗位JD见这里：https://www.leavesongs.com/PENETRATION/singapore-shopee-security-team-recruitment.html\n😋11月14日我发了一条朋友圈，收获了我微信中迄今为止最多的赞和评论——是的，我搬到新加坡来了，准备在这个陌生的地方开",
          "link": "https://www.leavesongs.com/THINK/from-China-to-Singapore-1.html",
          "publishedOn": "2022-05-13T01:01:11.127Z",
          "wordCount": 247,
          "title": "出中国记（上）",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/vulhub-10k-stars-moment.html",
          "author": "phithon",
          "description": "不知不觉离我所主导的开源项目Vulhub的第一个提交已经快5年了，Vulhub俨然已经成为我生活中的日常。就像我生活中的另外几个日常代码审计星球、Sec-News一样，他们并不是我刻意要去完成的一项工作，而成为了我现实中的“回调函数”。\n用回调函数来形容这件事听起来很独特，但仔细想想确实如此——我会在分析最新漏洞后将其做成Vulhub环境提交到Github，我会在读到不错文章后点击浏览器上的按钮将",
          "link": "https://www.leavesongs.com/THINK/vulhub-10k-stars-moment.html",
          "publishedOn": "2022-05-13T01:01:10.815Z",
          "wordCount": 90,
          "title": "Vulhub万赞纪念与抽奖",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/my-github-account-used-to-be-suspended.html",
          "author": "phithon",
          "description": "最近好像又有人 GitHub 被封，每隔一段时间就有。分享下我自己的经历吧，好几年以前了，也许还是有点参考价值。\n账号被封，查找原因\n那是 2017 年 12 月，有天早上起来突然发现自己的号phith0n登不上去了，具体的表现是：\n账号登录不上，登录以后明确告诉我我好被封了\nGitHub 个人页面访问显示 404\n我自己名下所有项目，访问都是 404\n但是我创建的 Group 还是好的，没有受",
          "link": "https://www.leavesongs.com/THINK/my-github-account-used-to-be-suspended.html",
          "publishedOn": "2022-05-13T01:01:10.598Z",
          "wordCount": 250,
          "title": "分享下我 GitHub 被封的经历",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "张戈博客",
      "feedUrl": "https://zhangge.net/feed",
      "siteUrl": "https://zhang.ge",
      "articles": []
    },
    {
      "title": "Reimu's blog",
      "feedUrl": "https://blog.k8s.li/atom.xml",
      "siteUrl": "/atom.xml",
      "articles": []
    }
  ],
  "cliVersion": "1.14.4"
}