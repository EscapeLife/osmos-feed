<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.escapelife.site/osmos-feed/index.html</id>
    <title>escapelife::feed</title>
    <updated>2023-01-25T00:47:54.080Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://www.escapelife.site/osmos-feed/index.html"/>
    <link rel="self" href="https://www.escapelife.site/osmos-feed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[��������н����һЩ��������]]></title>
        <id>https://blog.codingnow.com/2023/01/optimize.html</id>
        <link href="https://blog.codingnow.com/2023/01/optimize.html"/>
        <updated>2023-01-20T06:07:19.000Z</updated>
        <summary type="html"><![CDATA[��������ǰ���һ�칤����������������һЩ������һЩ��¼�� ������ʹ���������濪����Ϸʱ�������˲��ٺ�Ԥ������о�������⣬��������ٷ�˼��ԭ�е���Ʋ������Ľ�������Ϊ��ƾ�����һ��ͨ����Ϸ�����ǲ����ܵģ�������ʵ����Ŀ������������Ե�ʵ�֡���ͬʱӦ���Ϸ�˼���������ļ���ծ�������һ�꣬�Ҳ�������������빤�����٣��������վ��һ����˼��λ�ã��ල�������Ƶ��ݱ䡣 ���ǵ������������ǻ��� Lua �ģ������� Lua �Ķ�̬�ԣ����Ժܷ���İѸ���ģ��ճ����һ�𡣵��ǡ�Lua �� C/C++ ��ȣ��������������������ܲ��죬������Ⱦ������ԣ������� GPU ��ͨ�� API ��ȫ���� Lua �� binding �㣬���ڶ��������޴�ĳ��ϣ������׳����������⡣�ҹ��ơ����ֻ�����������޴� ����� 10K ����������ɣ��� PC ��������֧�ŵ� 100K ���ҡ� Lua ��Ŀ���Ż��޷�����·��ʹ�� jit �����������Ƶ� C side ������ Roberto ���ԣ�"Finally, keep in mind that those two...]]></summary>
        <author>
            <name>�Ʒ�� BLOG</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[蓝莲花公益小组简报]]></title>
        <id>https://manjusaka.blog/posts/2023/01/19/simple-brief-about-blue-lotus-group/</id>
        <link href="https://manjusaka.blog/posts/2023/01/19/simple-brief-about-blue-lotus-group/"/>
        <updated>2023-01-19T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>愿每个人心里，都盛开着永不凋零的蓝莲花</p>
<p><img src="https://raw.githubusercontent.com/Zheaoli/do-something-right/71724a0e2de9d49bde5a59d4abf20c8ae3cf3710/assets/logo.svg" alt="logo"></p>]]></summary>
        <author>
            <name>Manjusaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac自带音箱音量过低的解决方法一例]]></title>
        <id>https://codechina.org/?p=27285</id>
        <link href="https://codechina.org/2023/01/coreaudiod/"/>
        <updated>2023-01-18T15:41:16.000Z</updated>
        <summary type="html"><![CDATA[我的 Mac 是 MacBook M1Max，最近几个月频繁遇到耳机音量正常，自带音箱音量很低，完全无法听清的 […]
Mac自带音箱音量过低的解决方法一例最先出现在Tinyfool的个人网站。]]></summary>
        <author>
            <name>tinyfool</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go 的几种函数传参模式]]></title>
        <id>https://www.zlovezl.cn/articles/go-func-argument-patterns/</id>
        <link href="https://www.zlovezl.cn/articles/go-func-argument-patterns/"/>
        <updated>2023-01-18T00:51:56.769Z</updated>
        <summary type="html"><![CDATA[1. 普通传参
Go 语言支持按顺序传入参数来调用函数，下面是一个示例函数：
// ListApplications 查询应用列表
func ListApplications(limit, offset int) []Application {
    return allApps[offset : offset+limit]
}

调用代码：
ListApplications(5, 0)

当你想增加新参数时，可以直接修改函数签名。比如，下面的代码给 ListApplications 增加了新的过滤参数 owner：
func ListApplications(limit, offset int, owner string) []Application {
    if owner != "" {
        // ...
    }
    return allApps[offset : offset+limit]
}

调用代码也需要随之改变：
ListApplications(5, 0, "piglei")
// 不使用 owner 过滤
ListApplications(5, 0, "")

显而易见，这种普通传参模式存在以下几个明显的问题：
可读性不佳：只支持用位置，不支持用关键字来区分参数，参数变多后，各参数含义很难一目了然
破坏兼容性：增加新参数后，原有调用代码必须进行对应修改，比如像上方的 ListApplications(5, 0, "") 一样，在 owner 参数的位置传递空字符串
为了解决这些问题，常见的做法是引入一个参数结构体（struct）类型。
2. 使用参数结构体
新建一个结构体类型，里面包含函数需要支持的所有参数：
// ListAppsOptions 是查询应用列表时的可选项
type ListAppsOptions struct …]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何在 AI 时代、开源时代做一个独立开发者]]></title>
        <id>https://codechina.org/?p=27245</id>
        <link href="https://codechina.org/2023/01/ai-age/"/>
        <updated>2023-01-17T08:24:32.000Z</updated>
        <summary type="html"><![CDATA[AI 时代早已经来临，但是很多人还喜欢在说 AI 好像没有什么用处。我觉得这是很短视的。当社会的每一个普通人都 […]
如何在 AI 时代、开源时代做一个独立开发者最先出现在Tinyfool的个人网站。]]></summary>
        <author>
            <name>tinyfool</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[聊一聊我为什么现在开始要做一个独立开发者，我为什么又开始写程序了]]></title>
        <id>https://codechina.org/?p=27239</id>
        <link href="https://codechina.org/2023/01/indie/"/>
        <updated>2023-01-17T05:15:25.000Z</updated>
        <summary type="html"><![CDATA[我是从92年，上初中的时候开始写代码的。2001年大学毕业以后，我的工作也一直都在写代码，写了20年。 那时候 […]
聊一聊我为什么现在开始要做一个独立开发者，我为什么又开始写程序了最先出现在Tinyfool的个人网站。]]></summary>
        <author>
            <name>tinyfool</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[用 BPF 动态追踪 Python 程序]]></title>
        <id>https://www.kawabangga.com/?p=4894</id>
        <link href="https://www.kawabangga.com/posts/4894"/>
        <updated>2023-01-15T15:28:26.000Z</updated>
        <summary type="html"><![CDATA[最近在学习 BPF，这是一种目前比较流行的动态追踪技术，简单来说，它允许我们在不中断目前正在运行的程序的情况下 […]
Continue reading...
The post 用 BPF 动态追踪 Python 程序 first appeared on 卡瓦邦噶！.

相关文章:

认识Python的MetaClass
Python装饰器兼容加括号与不加括号的写法
Python 实现class_property
闭包初探
Java优先队列(PriorityQueue)介绍]]></summary>
        <author>
            <name>laixintao</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[如果编程就是写作]]></title>
        <id>https://www.zlovezl.cn/articles/if-programming-is-writing/</id>
        <link href="https://www.zlovezl.cn/articles/if-programming-is-writing/"/>
        <updated>2023-01-13T00:50:17.196Z</updated>
        <summary type="html"><![CDATA[很多人会把编程比作写作，比如《Thinking in Java》的作者 Bruce Eckel 就说：“程序员就是作家。”二者的确也有许多相似之处，好文章和好代码，都离不精确的结构与优美的表达。写作时，每个人都能用词语拼出句子，组成文章，但并非所有人都能写出好文章，编程也是一样。
不过严格来说，编程和写作虽有少许相似，却仍是两个迥异的技能，在很多方面差别很大。比如我们很少会重写一篇已发表的文章，但重构一段能正常运行的代码实属家常便饭。
不过这一次，我们不妨把编程中那些复杂概念抛掷一旁，来一次奇思妙想：“如果编程就是写作，我们能从中学到些什么？”
1. 使用人称代词
写文章时，我们常常会使用人称代词来指代人物的名字，以此减少冗余，提升文本的流畅度。这个技巧当然也可以用到编程中。
以下代码重复使用了一个冗长的表达式：
def run_server():
    if check(data.servier_config.host):
        start_server(data.servier_config.host)
    else:
        logger.error('Server %s is invalid.', data.servier_config.host)

定义一个临时变量，作为代词使用来简化代码：
def run_server():
    host = data.servier_config.host
    if check(host):
        start_server(host)
    else:
        logger.error('Server %s is invalid.', host)

2. 搭配使用长短句
写作时， 如何选择句子的长短是一门学问。汪曾祺说过：“语言的奥秘，说穿了不过是长句与短句的搭配。”长句信息…]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022 年的总结]]></title>
        <id>https://www.kawabangga.com/?p=4879</id>
        <link href="https://www.kawabangga.com/posts/4879"/>
        <updated>2023-01-12T11:24:38.000Z</updated>
        <summary type="html"><![CDATA[2022 年终于过去了，对于大多数人来说是糟心的一年，但我觉得也有一些指的记录的地方。 今年完成的最大的事情是 […]
Continue reading...
The post 2022 年的总结 first appeared on 卡瓦邦噶！.

相关文章:

分享一下“稍后阅读”的 random 功能
沉浸式工作
心动网络宣传片的翻译
没来的请举手
开源的世界如此之小？！]]></summary>
        <author>
            <name>laixintao</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT 正在杀死编程里的乐趣]]></title>
        <id>https://www.zlovezl.cn/articles/chatgpt-and-how-we-programming/</id>
        <link href="https://www.zlovezl.cn/articles/chatgpt-and-how-we-programming/"/>
        <updated>2023-01-12T00:49:32.644Z</updated>
        <summary type="html"><![CDATA[多年以来，编程一直是我生命最重要的快乐来源之一，我从没细想过这份快乐能伴随我多久。但就在几天前，在观摩了 ChatGPT 替我编写一个 Python 程序的全过程后，我突然有种强烈的感觉：不远的将来，人们能从编程中获得的乐趣可能会逐渐消失。
换句话说，ChatGPT 正在缓慢地“杀死”编程里的乐趣。在解释这个观点之前，让我先带你简单回顾一下：ChatGPT 到底帮我写了个什么程序。
用 ChatGPT 编写程序
先简单介绍一下 ChatGPT。ChatGPT 是人工智能公司 OpenAI 在 2022 年 11 月份推出的基于 GPT 自然语言生成模型的聊天机器人。它功能强大，能轻松完成许多在人类眼中非常复杂的任务，比方说：根据你描述的需求写一个可运行的程序。
前天晚上十一点左右，我正坐在床上刷手机，突然想起一个给路由器用的工具脚本，已经拖延了几个月都没动工。既然自己不愿写，不如这次试试让 ChatGPT 来帮我完成。
这个工具的需求简述如下：
接收一个 URL 地址作为参数，将该 URL 里的域名，以及该 URL 所返回的页面里的所有域名，一并转换成 dnsmasq 服务的配置条目，写入到 /etc/dnsmasq.conf 文件中（需要考虑重复写入）。
为了让 ChatGPT 写代码，我需要用自然语言清楚描述程序的用途和大概的执行流程，这个过程花了我 5 分钟左右。
需求描述如下：
Write a Python program, it accepts an URL address url from command line input, the program extract the domain name from url and stores it in a variable called src_domain, then it starts to request …]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 工匠：语句、表达式和海象操作符]]></title>
        <id>https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/</id>
        <link href="https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/"/>
        <updated>2023-01-12T00:49:32.635Z</updated>
        <summary type="html"><![CDATA[让我们从两行最简单的 Python 代码开始。
>>> name = 'piglei'
>>> print(f'Hello {name}!')
Hello piglei!

这是一个“Hello World”程序，你也许已经见过它无数次，对里面的每个字母都了如指掌。但你可能从未意识到，上面两行代码，刚好对应着 Python 语言里的两个重要概念：语句（statement） 和 表达式（expression）。
具体来说，name = 'piglei' 是一行赋值语句，它将字符串 'piglei' 赋给了 name 变量。print(f'Hello {name}!') 则是一个表达式，它通过调用内置函数 print 往屏幕打印信息。
表达式的特点
编写代码时，语句和表达式是两类最基本的代码单元。
虽然在日常表达中，我们会把语句和表达式区分开来，但二者并非完全不同——表达式实际上就是一种特殊的语句。和普通语句比起来，表达式的特别之处在于它拥有一个（或多个）返回值。
举例来说，前面的 print(...) 表达式就会返回一个值：None。你可以像下面这样获取它：
# print 函数总是返回 None
>>> val = print(f'Hello {name}!')
Hello piglei!
>>> val is None
True

虽然这么做没啥实际用途，但它足够体现出表达式的独特之处——因为你永远无法对普通语句做出类似的事情。无论是“赋值语句”、“循环语句”，还是一个“条件分支语句”，你永远都无法将其赋值给某个变量，这在语法上无从谈起：
>>> val = (name = 'piglei')
  File "<stdin>", line 1
    val = (name = 'piglei')
                ^
SyntaxError: invali…]]></summary>
        <author>
            <name>piglei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 193 期）：前端与后端，谁更难？]]></title>
        <id>http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html</id>
        <link href="http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html"/>
        <updated>2022-01-21T00:48:38.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。（[通知] 下周欢度春节，周刊暂停，2月11日恢复。）...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 192 期）：最大的机会来自新技术]]></title>
        <id>http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html</id>
        <link href="http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html"/>
        <updated>2022-01-14T00:39:50.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
</feed>