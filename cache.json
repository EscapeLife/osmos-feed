{
  "sources": [
    {
      "title": "Escape",
      "feedUrl": "https://www.escapelife.site/atom.xml",
      "siteUrl": "https://www.escapelife.site/atom.xml",
      "articles": [
        {
          "id": "https://www.escapelife.site/posts/27b90a5c.html",
          "author": null,
          "description": "<blockquote>\n<p><strong>人民民主专政：对占全国人口绝大多数的人民实行民主，对极少数敌对分子实施专政！</strong></p>\n</blockquote>\n<p>从十二月份开始，新冠的防疫政策来了个急转弯，开始几天还在每个省市部署防控策略、策略拨款等等措施",
          "link": "https://www.escapelife.site/posts/27b90a5c.html",
          "publishedOn": "2022-12-20T11:04:27.000Z",
          "wordCount": 1610,
          "title": "记录感染新冠的经历",
          "imageUrl": null
        },
        {
          "id": "https://www.escapelife.site/posts/6468a03c.html",
          "author": null,
          "description": "<blockquote>\n<p><strong>原文来自张文宏团队的公众号：<a",
          "link": "https://www.escapelife.site/posts/6468a03c.html",
          "publishedOn": "2022-12-11T15:23:04.000Z",
          "wordCount": 1627,
          "title": "新冠居家康复手册",
          "imageUrl": null
        },
        {
          "id": "https://www.escapelife.site/posts/4103d555.html",
          "author": null,
          "description": "<blockquote>\n<p><strong>购买车险应该根据自己的需求来决定，并且需要了解行情和条款！- <a",
          "link": "https://www.escapelife.site/posts/4103d555.html",
          "publishedOn": "2022-12-09T17:20:00.000Z",
          "wordCount": 1655,
          "title": "车险应该怎么买才划算",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "酷 壳 – CoolShell",
      "feedUrl": "https://coolshell.cn/feed",
      "siteUrl": "https://coolshell.cn",
      "articles": [
        {
          "id": "https://coolshell.cn/?p=22341",
          "author": "陈皓",
          "description": "写一篇与技术无关的文章，供大家参考。我住北京朝阳，从上周三开始我家一家三口陆续发烧生病，自测抗原后，都是阳性。好消息是，这个奥密克戎跟一般的病毒性感冒差不多，没...\n Read More  Read More\n感染新冠的经历 first appeared on 酷 壳 - CoolShell.",
          "link": "https://coolshell.cn/articles/22341.html",
          "publishedOn": "2022-12-13T07:39:39.000Z",
          "wordCount": 1652,
          "title": "感染新冠的经历",
          "imageUrl": "https://coolshell.cn/wp-content/uploads/2022/12/covid19.jpg"
        },
        {
          "id": "https://coolshell.cn/?p=22320",
          "author": "陈皓",
          "description": "很早前就想写一篇关于eBPF的文章，但是迟迟没有动手，这两天有点时间，所以就来写一篇，这文章主要还是简单的介绍eBPF 是用来干什么的，并通过几个示例来介绍是怎...\n Read More  Read More\neBPF 介绍 first appeared on 酷 壳 - CoolShell.",
          "link": "https://coolshell.cn/articles/22320.html",
          "publishedOn": "2022-12-10T02:38:51.000Z",
          "wordCount": 2418,
          "title": "eBPF 介绍",
          "imageUrl": "https://coolshell.cn/wp-content/uploads/2022/12/eBPF.jpeg"
        }
      ]
    },
    {
      "title": "阮一峰的网络日志",
      "feedUrl": "https://www.ruanyifeng.com/blog/atom.xml",
      "siteUrl": "http://www.ruanyifeng.com/blog/",
      "articles": [
        {
          "id": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html",
          "author": null,
          "description": "这里记录每周值得分享的科技内容，周五发布。（[通知] 下周欢度春节，周刊暂停，2月11日恢复。）...",
          "link": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-193.html",
          "publishedOn": "2022-01-21T00:48:38.000Z",
          "wordCount": 320,
          "title": "科技爱好者周刊（第 193 期）：前端与后端，谁更难？"
        },
        {
          "id": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html",
          "author": null,
          "description": "这里记录每周值得分享的科技内容，周五发布。...",
          "link": "http://www.ruanyifeng.com/blog/2022/01/weekly-issue-192.html",
          "publishedOn": "2022-01-14T00:39:50.000Z",
          "wordCount": 407,
          "title": "科技爱好者周刊（第 192 期）：最大的机会来自新技术"
        }
      ]
    },
    {
      "title": "MacTalk-池建强的随想录",
      "feedUrl": "https://macshuo.com/?feed=rss2",
      "siteUrl": "https://macshuo.com",
      "articles": []
    },
    {
      "title": "Tinyfool的个人网站",
      "feedUrl": "http://feeds.feedburner.com/Tinyfoolblog",
      "siteUrl": "https://codechina.org/",
      "articles": [
        {
          "id": "https://codechina.org/?p=26350",
          "author": "tinyfool",
          "description": "截止到目前为止，我的Blog有194篇文章已经发布了，然而，如果你用Google分析去看2022年的内容分析。 […]\nSEO：用ChatGPT来做搜索关键词聚类分析，方法和实例最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2022/12/seo-chatgpt-search/",
          "publishedOn": "2022-12-17T08:07:19.000Z",
          "wordCount": 1931,
          "title": "SEO：用ChatGPT来做搜索关键词聚类分析，方法和实例",
          "imageUrl": "https://codechina.org/wp-content/uploads/2022/12/A-pile-of-words-floating-randomly-in-the-air-with-a-robot-in-the-background.-Translate-into-English.-.png"
        },
        {
          "id": "https://codechina.org/?p=26295",
          "author": "tinyfool",
          "description": "课程视频地址 https://www.youtube.com/watch?v=rmVRLeJRkl4& […]\nStandford CS224N-深度学习下的NLP学习笔记（不定期更新）最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2022/12/standford-cs224n-dl-nlp-1/",
          "publishedOn": "2022-12-16T02:33:20.000Z",
          "wordCount": 1354,
          "title": "Standford CS224N-深度学习下的NLP学习笔记（不定期更新）",
          "imageUrl": "https://codechina.org/wp-content/uploads/2022/12/r2d2-robot-read-book.png"
        },
        {
          "id": "https://codechina.org/?p=26143",
          "author": "tinyfool",
          "description": "官方常见问题解答 翻译自官方的FAQ页面，翻译由ChatGPT完成。 1、ChatGPT 的使用成本是多少？  […]\nChatGPT常见问题解答【官方/非官方版】最先出现在Tinyfool的个人网站。",
          "link": "https://codechina.org/2022/12/chatgpt-faq/",
          "publishedOn": "2022-12-11T01:13:37.000Z",
          "wordCount": 1154,
          "title": "ChatGPT常见问题解答【官方/非官方版】",
          "imageUrl": "https://codechina.org/wp-content/uploads/2022/12/DALL·E-2022-12-10-23.38.10-random-blue-color-Rectangle-as-background-white-big-question-mark-block-on-top-it-a-robot-sit-on-it-1024_768-1.png"
        },
        {
          "id": "https://codechina.org/?p=26058",
          "author": "tinyfool",
          "description": "原文来自张文宏团队的公众号，华山感染，链接： https://mp.weixin.qq.com/s/FNnr7 […]",
          "link": "https://codechina.org/2022/12/xinguan/",
          "publishedOn": "2022-12-09T13:57:00.000Z",
          "wordCount": 1118,
          "title": "【转载】抗新冠策略千万条，核心就一条：得了新冠是否需要去医院？",
          "imageUrl": null
        },
        {
          "id": "https://codechina.org/?p=25946",
          "author": "tinyfool",
          "description": "ChatGPT简介 ChatGPT是一种预先训练的大型语言模型，由OpenAI开发，能够进行高质量的人工智能（ […]",
          "link": "https://codechina.org/2022/12/chatgpt-function-1-writting/",
          "publishedOn": "2022-12-08T07:56:59.000Z",
          "wordCount": 3227,
          "title": "ChatGPT实用指南（1）文案和写作方面",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "ChangeLog of KDr2.com",
      "feedUrl": "https://kdr2.com/misc/site-log.xml",
      "siteUrl": "http://kdr2.com/misc/",
      "articles": []
    },
    {
      "title": "卡瓦邦噶！",
      "feedUrl": "https://www.kawabangga.com/feed",
      "siteUrl": "https://www.kawabangga.com",
      "articles": []
    },
    {
      "title": "Manjusaka",
      "feedUrl": "https://manjusaka.itscoder.com/atom.xml",
      "siteUrl": "https://manjusaka.blog/atom.xml",
      "articles": []
    },
    {
      "title": "laike9m's blog",
      "feedUrl": "https://laike9m.com/blog/rss",
      "siteUrl": "https://laike9m.com/blog/rss",
      "articles": []
    },
    {
      "title": "Frost's Blog",
      "feedUrl": "https://frostming.com/feed.xml",
      "siteUrl": "https://frostming.com",
      "articles": []
    },
    {
      "title": "Posts on Jiayuan Thoughts",
      "feedUrl": "http://blog.jiayuanzhang.com/post/index.xml",
      "siteUrl": "https://blog.jiayuanzhang.com/post/",
      "articles": []
    },
    {
      "title": "codedump的网络日志",
      "feedUrl": "https://www.codedump.info/index.xml",
      "siteUrl": "https://www.codedump.info/",
      "articles": []
    },
    {
      "title": "李辉",
      "feedUrl": "https://greyli.com/feed",
      "siteUrl": "https://greyli.com",
      "articles": [
        {
          "id": "https://greyli.com/?p=4687",
          "author": "李辉",
          "description": "今年一直处于被工作、写书和开源项目这三件事情拉扯的状态。这个月底是两本书合同上的截稿时间，但我一本都没完成。这 […]",
          "link": "https://greyli.com/be-an-early-bird/",
          "publishedOn": "2022-12-21T15:05:16.000Z",
          "wordCount": 219,
          "title": "早起是唯一出路",
          "imageUrl": "https://greyli.com/wp-content/uploads/2020/07/avatar.jpg"
        }
      ]
    },
    {
      "title": "�Ʒ�� BLOG",
      "feedUrl": "https://blog.codingnow.com/atom.xml",
      "siteUrl": "https://blog.codingnow.com/",
      "articles": [
        {
          "id": "https://blog.codingnow.com/2022/12/covid19.html",
          "author": null,
          "description": "�³�����ͬ�µ�٩�����˭Ҳ�㲻������Ⱦ�ǳ�����¡����ȫ�Ҷ������ˣ����ڲ�����λ������ᣬ��඼Ȭ���ˡ��ڴ˼�¼һ����ε����̡� ����ǹ��ݵ�ȫ�濪�š������ڼ��Ѿ������˿�һ���£���ò��С����ŵ�һ����ĩ����Լ��ͬ�³�ȥ�棬�����������ҡ��������磨12 �� 11 �գ���ȥ���ա� �Ҿ��ù����Ѿ��ſ�����β����� R0 �൱�ߣ����ٴ������޿ɱ��⣬��һ����ĩ����зǳ���ķ��ա�����ȡ����ԭ��ÿ����ĩ�����һ�����������Ӽ������ڼ��С�����һֱ�е���ԣ�����һЩ��ð�����������֢״�� Day 0 (12 �� 12 ����һ�� ���ű�֪ͨһ�����ͬ���Ѿ�ȷ���Ҫ���ӼҰ칫���۲�һ���ٿ��ǻذ칫�ҡ� �ҵ��������ϰ��ˡ�������֮ǰ�ĸ�ð֢״�������飩�Ѿ���ȫ��ʧ������״̬�ǳ��á� ��������һ����գ�38 �ȣ����Բ⿹ԭ���ԣ���������Ϊ��ð����һ����Ů��������˯����...",
          "link": "https://blog.codingnow.com/2022/12/covid19.html",
          "publishedOn": "2022-12-20T01:53:33.000Z",
          "wordCount": 141,
          "title": "covid-19 ��Ⱦ������¼",
          "imageUrl": null
        },
        {
          "id": "https://blog.codingnow.com/2022/12/interaction.html",
          "author": null,
          "description": "����������������Ϸ���ֻ����ȣ���������Χ���Ŵ��������������������ʱ�������� PC ���������ԣ��ཻܶ�����ⶼ���ױ����ӵ������ԣ��������е����滨�˺ܴ��������ֻ��豸�ϼ��ļ����á��ڿ���ʱ�Ƽ�������Աֱ�����ֻ����޸ġ����ԡ����������׷����ƽʱ�����������Բ�������⡣ btw��ֱ�����ֻ��Ͽ������� PC �Ͽ���������һ���ô���������ʱ�ܹ�ע����Ԫ�أ����������壩�Ĵ�С�Ƿ���ʡ�...",
          "link": "https://blog.codingnow.com/2022/12/interaction.html",
          "publishedOn": "2022-12-13T02:54:35.000Z",
          "wordCount": 101,
          "title": "�������ϵ�һЩ�����������",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "piglei",
      "feedUrl": "https://www.zlovezl.cn/feeds/latest",
      "siteUrl": "http://www.zlovezl.cn/",
      "articles": [
        {
          "id": "https://www.zlovezl.cn/articles/go-func-argument-patterns/",
          "author": null,
          "description": "1. 普通传参\nGo 语言支持按顺序传入参数来调用函数，下面是一个示例函数：\n// ListApplications 查询应用列表\nfunc ListApplications(limit, offset int) []Application {\n    return allApps[offset : offset+limit]\n}\n\n调用代码：\nListApplications(5, 0)\n\n当你想增加新参数时，可以直接修改函数签名。比如，下面的代码给 ListApplications 增加了新的过滤参数 owner：\nfunc ListApplications(limit, offset int, owner string) []Application {\n    if owner != \"\" {\n        // ...\n    }\n    return allApps[offset : offset+limit]\n}\n\n调用代码也需要随之改变：\nListApplications(5, 0, \"piglei\")\n// 不使用 owner 过滤\nListApplications(5, 0, \"\")\n\n显而易见，这种普通传参模式存在以下几个明显的问题：\n可读性不佳：只支持用位置，不支持用关键字来区分参数，参数变多后，各参数含义很难一目了然\n破坏兼容性：增加新参数后，原有调用代码必须进行对应修改，比如像上方的 ListApplications(5, 0, \"\") 一样，在 owner 参数的位置传递空字符串\n为了解决这些问题，常见的做法是引入一个参数结构体（struct）类型。\n2. 使用参数结构体\n新建一个结构体类型，里面包含函数需要支持的所有参数：\n// ListAppsOptions 是查询应用列表时的可选项\ntype ListAppsOptions struct …",
          "link": "https://www.zlovezl.cn/articles/go-func-argument-patterns/",
          "publishedOn": "2022-12-17T00:43:33.715Z",
          "wordCount": 719,
          "title": "Go 的几种函数传参模式",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/if-programming-is-writing/",
          "author": null,
          "description": "很多人会把编程比作写作，比如《Thinking in Java》的作者 Bruce Eckel 就说：“程序员就是作家。”二者的确也有许多相似之处，好文章和好代码，都离不精确的结构与优美的表达。写作时，每个人都能用词语拼出句子，组成文章，但并非所有人都能写出好文章，编程也是一样。\n不过严格来说，编程和写作虽有少许相似，却仍是两个迥异的技能，在很多方面差别很大。比如我们很少会重写一篇已发表的文章，但重构一段能正常运行的代码实属家常便饭。\n不过这一次，我们不妨把编程中那些复杂概念抛掷一旁，来一次奇思妙想：“如果编程就是写作，我们能从中学到些什么？”\n1. 使用人称代词\n写文章时，我们常常会使用人称代词来指代人物的名字，以此减少冗余，提升文本的流畅度。这个技巧当然也可以用到编程中。\n以下代码重复使用了一个冗长的表达式：\ndef run_server():\n    if check(data.servier_config.host):\n        start_server(data.servier_config.host)\n    else:\n        logger.error('Server %s is invalid.', data.servier_config.host)\n\n定义一个临时变量，作为代词使用来简化代码：\ndef run_server():\n    host = data.servier_config.host\n    if check(host):\n        start_server(host)\n    else:\n        logger.error('Server %s is invalid.', host)\n\n2. 搭配使用长短句\n写作时， 如何选择句子的长短是一门学问。汪曾祺说过：“语言的奥秘，说穿了不过是长句与短句的搭配。”长句信息…",
          "link": "https://www.zlovezl.cn/articles/if-programming-is-writing/",
          "publishedOn": "2022-12-12T00:51:55.477Z",
          "wordCount": 371,
          "title": "如果编程就是写作",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/",
          "author": null,
          "description": "让我们从两行最简单的 Python 代码开始。\n>>> name = 'piglei'\n>>> print(f'Hello {name}!')\nHello piglei!\n\n这是一个“Hello World”程序，你也许已经见过它无数次，对里面的每个字母都了如指掌。但你可能从未意识到，上面两行代码，刚好对应着 Python 语言里的两个重要概念：语句（statement） 和 表达式（expression）。\n具体来说，name = 'piglei' 是一行赋值语句，它将字符串 'piglei' 赋给了 name 变量。print(f'Hello {name}!') 则是一个表达式，它通过调用内置函数 print 往屏幕打印信息。\n表达式的特点\n编写代码时，语句和表达式是两类最基本的代码单元。\n虽然在日常表达中，我们会把语句和表达式区分开来，但二者并非完全不同——表达式实际上就是一种特殊的语句。和普通语句比起来，表达式的特别之处在于它拥有一个（或多个）返回值。\n举例来说，前面的 print(...) 表达式就会返回一个值：None。你可以像下面这样获取它：\n# print 函数总是返回 None\n>>> val = print(f'Hello {name}!')\nHello piglei!\n>>> val is None\nTrue\n\n虽然这么做没啥实际用途，但它足够体现出表达式的独特之处——因为你永远无法对普通语句做出类似的事情。无论是“赋值语句”、“循环语句”，还是一个“条件分支语句”，你永远都无法将其赋值给某个变量，这在语法上无从谈起：\n>>> val = (name = 'piglei')\n  File \"<stdin>\", line 1\n    val = (name = 'piglei')\n                ^\nSyntaxError: invali…",
          "link": "https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/",
          "publishedOn": "2022-12-11T00:53:46.102Z",
          "wordCount": 701,
          "title": "Python 工匠：语句、表达式和海象操作符",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/chatgpt-and-how-we-programming/",
          "author": null,
          "description": "多年以来，编程一直是我生命最重要的快乐来源之一，我从没细想过这份快乐能伴随我多久。但就在几天前，在观摩了 ChatGPT 替我编写一个 Python 程序的全过程后，我突然有种强烈的感觉：不远的将来，人们能从编程中获得的乐趣可能会逐渐消失。\n换句话说，ChatGPT 正在缓慢地“杀死”编程里的乐趣。在解释这个观点之前，让我先带你简单回顾一下：ChatGPT 到底帮我写了个什么程序。\n用 ChatGPT 编写程序\n先简单介绍一下 ChatGPT。ChatGPT 是人工智能公司 OpenAI 在 2022 年 11 月份推出的基于 GPT 自然语言生成模型的聊天机器人。它功能强大，能轻松完成许多在人类眼中非常复杂的任务，比方说：根据你描述的需求写一个可运行的程序。\n前天晚上十一点左右，我正坐在床上刷手机，突然想起一个给路由器用的工具脚本，已经拖延了几个月都没动工。既然自己不愿写，不如这次试试让 ChatGPT 来帮我完成。\n这个工具的需求简述如下：\n接收一个 URL 地址作为参数，将该 URL 里的域名，以及该 URL 所返回的页面里的所有域名，一并转换成 dnsmasq 服务的配置条目，写入到 /etc/dnsmasq.conf 文件中（需要考虑重复写入）。\n为了让 ChatGPT 写代码，我需要用自然语言清楚描述程序的用途和大概的执行流程，这个过程花了我 5 分钟左右。\n需求描述如下：\nWrite a Python program, it accepts an URL address url from command line input, the program extract the domain name from url and stores it in a variable called src_domain, then it starts to request …",
          "link": "https://www.zlovezl.cn/articles/chatgpt-and-how-we-programming/",
          "publishedOn": "2022-12-11T00:53:46.085Z",
          "wordCount": 484,
          "title": "ChatGPT 正在杀死编程里的乐趣",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/how-to-design-config-file-for-software/",
          "author": null,
          "description": "在设计和开发服务端（后端）软件时，配置文件是一个绕不开的话题。\n配置文件是一种用于存放各类可配置项的特殊文件。每个软件都会预设一些默认配置，但这些默认值不可能适用于所有情况。因此，到了不同的环境中，我们常常需要用配置文件对其进行扩展和修改。\n拿版本控制软件 git 举例。大部分用户的 home 目录（~）都存放着一份 .gitconfig 配置文件，里面写着自己的用户名和邮箱地址：\n[user]\n    name = piglei\n    email = piglei2007@gmail.com\n\n就像软件的任何一个主要功能一样，配置文件也会极大的影响软件的使用体验。良好的设计能让软件变得更易用，糟糕的设计则会带来许多意想不到的问题，将用户拒之门外。\n在这篇文章中，我整理了 4 条关于“软件配置文件”的设计建议，希望能对你有所帮助。\n1. 最好不给配置也能用\n在网络世界里，每过一天，人们的耐心似乎就又比前一天减少了一丁点。一个制作精良的短视频，如果 3 秒钟之内无法抓住你，你的右手拇指就会条件反射般将它划走。\n现在，假设你开发了一个非常有用的工具软件，并发布到了网上。软件的功能非常全面，所有人在使用它之前，需要编辑一份包含 20 项配置的配置文件。你猜，有多大比例的潜在用户会直接掉头走掉？\n当我们想要一件东西时，总是一刻也不想等。因此，初始的配置过程麻烦与否，会强烈影响人们尝试软件的决心。在这方面，我认为最好的体验是：无需提供任何配置，便能直接使用软件 80% 以上的功能。\n假如无法做到这一点，我们也应该试着从以下几个方面着手，尽量降低用户的配置成本，压缩从“开始安装”到“可使用”之间的等待时间。\n1.1 预设合理的默认值\n为了将必须由用户提供的配置项，压缩到最少。你得给软件的所有配置项预设一个足够合理的默认值。这些默认值应当能让尽可能多的用户满意。\n举个例子，假如你的软件…",
          "link": "https://www.zlovezl.cn/articles/how-to-design-config-file-for-software/",
          "publishedOn": "2022-12-09T00:49:55.074Z",
          "wordCount": 303,
          "title": "设计服务端软件配置的 4 条建议",
          "imageUrl": null
        },
        {
          "id": "https://www.zlovezl.cn/articles/my-book-releases/",
          "author": null,
          "description": "我写了一本 Python 语言的编程进阶书：《Python工匠：案例、技巧与工程实践》，本文是关于这本书背后的故事与一些致谢。\n\n我一直觉得编程某种意义上是一门“手艺”，因为优雅而高效的代码，就如同完美的工艺品一样让人赏心悦目。就像一位用锤子敲敲打打了十几年的铁匠，总结出一套“如何锻造出锋利的刀”的经验之谈——我在代码世界也“敲敲打打”了十几年，沉淀下来的便是这本《Python工匠》。\n我将自己这些年掌握的技巧、经验与编程建议，去粗取精后悉数写入书中，希望它能帮读者朋友们完成从初学者到工匠的跃迁。\n书目前已经正式上市，欢迎点击购买。\n本文主要内容来自书中的“前言”部分，略有删改。\n结缘 Python\n我初次接触 Python 是在 2008 年末。那时临近大学毕业，我凭着在学校里学到的一丁点儿 Java 知识四处求职。我从大学所在的城市南昌出发去了北京，借宿在一位朋友的出租屋里，他当时在巨鲸音乐网上班，用的主要编程语言正是 Python。\n得知我正在寻找一份 Java 相关的工作，那位朋友跟我说：“写 Java 代码有啥意思啊？Python 比 Java 好玩多了，而且功能还特别强大，连 Google 都在用 !”\n在他的热情“传道”下，我对 Python 语言产生了好奇心，于是找了一份当时最流行的开源教程 Dive into Python，开始学起 Python 来。\n实话实说，之前在学校用 Java 和 C 语言编程时，我很少体会到编程的快乐，也从未期待过自己将来要以写代码为生。但神奇的是，在学了一些 Python 的基础知识，并用它写了几个小玩意儿以后，我突然意识到原来自己很喜欢编程，并开始期待找到一份以 Python 为主要编程语言的开发工作——也许这就是我和 Python 之间的缘分吧！\n幸运的是，在当时的 CPyUG（中国 Python 用户组）邮件组里，正好有…",
          "link": "https://www.zlovezl.cn/articles/my-book-releases/",
          "publishedOn": "2022-12-08T00:47:15.651Z",
          "wordCount": 275,
          "title": "用 Python 编程 13 年后，我把经验写成了 400 页的书",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "静觅",
      "feedUrl": "https://cuiqingcai.com/atom.xml",
      "siteUrl": "/atom.xml",
      "articles": []
    },
    {
      "title": "咸糖 - 自律者自由",
      "feedUrl": "https://vim0.com/index.xml",
      "siteUrl": "https://vim0.com/",
      "articles": []
    },
    {
      "title": "离别歌",
      "feedUrl": "https://www.leavesongs.com/feed",
      "siteUrl": "https://www.leavesongs.com",
      "articles": [
        {
          "id": "https://www.leavesongs.com/THINK/europe-trip-2022.html",
          "author": "phithon",
          "description": "这篇文章记录了我和三个小伙伴在法国、瑞士旅行的经历。\n我大概是在今年7月做了去欧洲旅行的计划，说是“计划”也不太贴切，只是几个朋友搜了一下比较合适的机票以后，就决定要来了。类似的“计划”之前也发生过，有时候甚至是买好机票才喊人，不得不说我的很多决定是草率的，但这就是我。\n准备\n签证\n由于这次旅行是放在新加坡公共假期“屠妖节”的那一个礼拜（10月底），所以我就在8月份去申请了签证。\n我们的第一目的地",
          "link": "https://www.leavesongs.com/THINK/europe-trip-2022.html",
          "publishedOn": "2022-12-20T00:48:26.035Z",
          "wordCount": 224,
          "title": "2022年欧洲游记",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/SOFT/paas-service-from-heroku-to-fly-io.html",
          "author": "phithon",
          "description": "今年8月得知了Heroku将要在今年11月彻底下线免费服务，我只有少量服务放在Heroku上，所以没有太在意，直到10月感觉到不得不开始做迁移相关的工作了，于是开始着手准备，并有了这篇文章。\n这篇文章纯属是事后记录的一些流水账，可能缺少截图和代码片段，全当是作为一个故事看，可能不具备参考性。\n为什么选择PaaS服务\n从很久以前开始接触“虚拟主机”这个行业开始，我经历了虚拟主机、VPS、云主机、Pa",
          "link": "https://www.leavesongs.com/SOFT/paas-service-from-heroku-to-fly-io.html",
          "publishedOn": "2022-12-19T00:43:01.516Z",
          "wordCount": 223,
          "title": "PaaS服务从Heroku迁移到fly.io小计",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/um560-two-weeks-using-experience.html",
          "author": "phithon",
          "description": "本文推荐的UM560非与厂商合作推广，仅为我自己的使用体验。\n我大四买了人生里第一台Macbook pro，从那会开始Mac卡顿的问题就一直困扰我到现在。当然这也可能是我自己的问题——我没钱买顶配Macbook，以前公司发的也是低配Macbook pro，我甚至用8G内存的13寸Mac直到2018年才换。\n来新公司以后总算摸到了15寸Mac，但还是16G内存Intel芯片的老电脑，被Burps",
          "link": "https://www.leavesongs.com/THINK/um560-two-weeks-using-experience.html",
          "publishedOn": "2022-12-17T00:43:34.253Z",
          "wordCount": 307,
          "title": "使用Minisforum UM560小主机办公一周体验",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/iOS-with-chuangmiplug-smart-plug2.html",
          "author": "phithon",
          "description": "搬到新加坡以后，我拥有了很多张手机卡：\n1张国内的电话卡，回国时使用\n1张新加坡电话卡，本地使用\n1张马来西亚电话卡，去马来西亚旅行时使用\n1张英国电话卡，去欧洲旅行时使用\n相对应的，我需要有备用机来运行这些号码。正好手上有一台旧的iPhone XR，于是我就把其中两张卡插到了这个手机里。但随之而来的是另一个问题，手机长期插电对电池非常不友好，很有可能导致备用机电池彻底废掉。\n垃圾佬的家里从来",
          "link": "https://www.leavesongs.com/THINK/iOS-with-chuangmiplug-smart-plug2.html",
          "publishedOn": "2022-12-13T00:52:59.006Z",
          "wordCount": 296,
          "title": "iOS备用机自动充电方案",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/PENETRATION/xss-from-my-blog.html",
          "author": "phithon",
          "description": "今天晚上收到几个提醒，打开一看是有人在我博客评论区测试XSS：\n\n本来这种测试司空见惯了，而且此人也没成功找到XSS，放以前我多半就关掉页面了。\n不过我今晚不知为何临时起意，就顺势看了一下自己写的代码，居然被我自己找到一个XSS漏洞：\n\n原因是什么呢？\n0x01 开发历史介绍\n我当时在开发这个回复按钮的时候，为了方便，直接用JavaScript伪协议来调用reply_to函数，比如：\n\nreply",
          "link": "https://www.leavesongs.com/PENETRATION/xss-from-my-blog.html",
          "publishedOn": "2022-12-12T00:51:55.960Z",
          "wordCount": 327,
          "title": "我自己博客的一个XSS的故事",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/PENETRATION/flarum-rce-tour.html",
          "author": "phithon",
          "description": "本文首发于跳跳糖，转载请联系站方。\n一次日常测试中，偶然遇到了一个Flarum搭建的论坛，并获得了其管理员账号。本来到这里已经可以算完成了任务，将漏洞报给具体负责的人就结束了，但是既然已经拿到了管理员账号，何不尝试一下RCE呢？\n首先，我在管理员后台看到当前Fla",
          "link": "https://www.leavesongs.com/PENETRATION/flarum-rce-tour.html",
          "publishedOn": "2022-12-10T00:45:29.756Z",
          "wordCount": 571,
          "title": "从偶遇Flarum开始的RCE之旅",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/xray-3-years.html",
          "author": "phithon",
          "description": "上周XRay做了一次三周年活动，简单写了一段寄语，记录于博客。\n大家好，我是phith0n，安全社区有很多人叫我P师傅，以前很抗拒这个称呼，总是给人一种互相吹捧的感觉，不过后来我换了一个角度理解这个称呼——以前坐公交车不认路的时候，我们上车时总会问司机：师傅，这个车到不到国贸大厦？\n这么多年过去了，大部分人用上智能手机，搜索引擎，很少再有人会再问出这类问题。但是我还是愿意当一个普普通通的司机师傅",
          "link": "https://www.leavesongs.com/THINK/xray-3-years.html",
          "publishedOn": "2022-12-09T00:49:55.216Z",
          "wordCount": 120,
          "title": "XRay三周年活动寄语",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/my-github-account-used-to-be-suspended.html",
          "author": "phithon",
          "description": "最近好像又有人 GitHub 被封，每隔一段时间就有。分享下我自己的经历吧，好几年以前了，也许还是有点参考价值。\n账号被封，查找原因\n那是 2017 年 12 月，有天早上起来突然发现自己的号phith0n登不上去了，具体的表现是：\n账号登录不上，登录以后明确告诉我我好被封了\nGitHub 个人页面访问显示 404\n我自己名下所有项目，访问都是 404\n但是我创建的 Group 还是好的，没有受",
          "link": "https://www.leavesongs.com/THINK/my-github-account-used-to-be-suspended.html",
          "publishedOn": "2022-12-08T00:47:16.743Z",
          "wordCount": 314,
          "title": "分享下我 GitHub 被封的经历",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/how-to-verify-individual-in-singapore.html",
          "author": "phithon",
          "description": "三月是国内个税申报的月份，也是新加坡个税申报的月份，前几天收到一封信，告诉我应该填写个税申报的表格了。\n\n在这封信里，提到了下面这段话：\nTo file your Income Tax Return, log in to myTax Portal with Singpass.\n这里面有说到一个东西叫Singpass，在我来新加坡的这几个月里，几乎可以把Singpass看成新加坡政府数字化建设的",
          "link": "https://www.leavesongs.com/THINK/how-to-verify-individual-in-singapore.html",
          "publishedOn": "2022-12-08T00:47:16.717Z",
          "wordCount": 148,
          "title": "新加坡企业是怎么做实名认证的？",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/why-subscribe-a-newspaper-in-2022.html",
          "author": "phithon",
          "description": "前两天我在收拾屋子。\n我家是个很典型的单人公寓，由于女朋友还没到新加坡来，现在的屋子一个人住恰到好处。不过一个人住总是一个熵增的过程，所以我会隔段时间收拾一下屋子，把一些不想要又舍不得丢的东西塞进我家里的一个“黑洞”里，这样外面看起来仍然是整齐的。\n这个“黑洞”是一个正经防空洞——新加坡大部分民宅都配有一个防空洞，面积大概一两个平米，所以大部分人会选择将这个房间作为杂物间。\n我就是在走进这个杂物间",
          "link": "https://www.leavesongs.com/THINK/why-subscribe-a-newspaper-in-2022.html",
          "publishedOn": "2022-12-08T00:47:16.540Z",
          "wordCount": 154,
          "title": "2022年我为什么订报纸",
          "imageUrl": null
        },
        {
          "id": "https://www.leavesongs.com/THINK/vulhub-10k-stars-moment.html",
          "author": "phithon",
          "description": "不知不觉离我所主导的开源项目Vulhub的第一个提交已经快5年了，Vulhub俨然已经成为我生活中的日常。就像我生活中的另外几个日常代码审计星球、Sec-News一样，他们并不是我刻意要去完成的一项工作，而成为了我现实中的“回调函数”。\n用回调函数来形容这件事听起来很独特，但仔细想想确实如此——我会在分析最新漏洞后将其做成Vulhub环境提交到Github，我会在读到不错文章后点击浏览器上的按钮将",
          "link": "https://www.leavesongs.com/THINK/vulhub-10k-stars-moment.html",
          "publishedOn": "2022-12-08T00:47:16.336Z",
          "wordCount": 145,
          "title": "Vulhub万赞纪念与抽奖",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "张戈博客",
      "feedUrl": "https://zhangge.net/feed",
      "siteUrl": "https://zhang.ge",
      "articles": []
    },
    {
      "title": "Reimu's blog",
      "feedUrl": "https://blog.k8s.li/atom.xml",
      "siteUrl": "/atom.xml",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}